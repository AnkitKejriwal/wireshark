# h248.cnf
# H.248 conformation file

# $Id$

#.MODULE_IMPORT

#.EXPORTS

#.PDU

#.NO_EMIT
MtpAddress
PkgdName
PropertyID
SignalName
EventName
ContextID

#.TYPE_RENAME
IndAudMediaDescriptor/streams			indAudMediaDescriptorStreams
ActionRequest/contextId					contextId
ActionReply/contextId					contextId
TransactionRequest/transactionId		transactionId
TransactionPending/transactionId		transactionId
TransactionReply/transactionId			transactionId

#.FIELD_RENAME
IP4Address/address		iP4Address
IP6Address/address		iP6Address
ContextAttrAuditRequest/emergency	cAAREmergency
ContextAttrAuditRequest/priority	cAARPriority
SecondRequestedEvent/eventAction	secondaryEventAction
TerminationStateDescriptor/eventBufferControl	tSEventBufferControl
SecondEventsDescriptor/eventList	secondaryEventList
IndAudEventBufferDescriptor/eventName	iAEBDEventName
TerminationID/id			terminationId
IndAudStreamParms/localControlDescriptor iASPLocalControlDescriptor
IndAudStreamParms/localDescriptor	iASPLocalDescriptor
MediaDescriptor/streams/oneStream	mediaDescriptorOneStream
MediaDescriptor/streams/multiStream	mediaDescriptorMultiStream
MediaDescriptor/streams/multiStream/_item	mediaDescriptorMultiStream_item
DomainName/name				domName
IndAudEventsDescriptor/pkgdName		iAEDPkgdName
IndAudLocalRemoteDescriptor/propGrps	iAPropertyGroup
IndAudLocalControlDescriptor/propertyParms	indAudPropertyParms
IndAudTerminationStateDescriptor/propertyParms	indAudPropertyParms
IndAudLocalControlDescriptor/reserveGroup	iALCDReserveGroup
IndAudLocalControlDescriptor/reserveValue	iALCDReserveValue
IndAudLocalControlDescriptor/streamMode		iALCDStreamMode
IndAudStreamDescriptor/streamParms		indAudStreamParms
IndAudMediaDescriptor/termStateDescr		indAudTerminationStateDescriptor
IndAudSignal/signalName				iASignalName
IndAudSeqSigList/signalList			iASignalList
IndAudSignalsDescriptor/signal			indAudSignal
IndAudSignalsDescriptor/seqSigList		indAudSeqSigList
IndAudTerminationStateDescriptor/serviceState   iATSDServiceState
IndAudStreamParms/remoteDescriptor		iASPRemoteDescriptor
PropertyParm/value				propertyParamValue
IndAudMediaDescriptor/streams			indAudMediaDescriptorStreams
AmmRequest/terminationID			terminationIDList
AmmsReply/terminationID			terminationIDList
SubtractRequest/terminationID			terminationIDList
NotifyRequest/terminationID			terminationIDList
NotifyReply/terminationID			terminationIDList
ServiceChangeRequest/terminationID			terminationIDList
ServiceChangeReply/terminationID			terminationIDList


#.FN_BODY TransactionRequest/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY TransactionPending/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY transactionReply/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_FTR TransactionRequest
	  if (check_col(pinfo->cinfo, COL_INFO)) col_append_str(pinfo->cinfo, COL_INFO, "} }");
#.END

#.FN_FTR TransactionPending
	  if (check_col(pinfo->cinfo, COL_INFO)) col_append_str(pinfo->cinfo, COL_INFO, "} }");
#.END

#.FN_FTR TransactionAck
	  if (check_col(pinfo->cinfo, COL_INFO)) col_append_str(pinfo->cinfo, COL_INFO, "} }");
#.END

#.FN_BODY ActionRequest/contextId
	offset = dissect_h248_ctx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY ActionReply/contextId
	offset = dissect_h248_ctx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_HDR Command/addReq
	  command_string = "addReq {";
#.END

#.FN_HDR Command/moveReq
	  command_string =  "moveReq {";
#.END

#.FN_HDR Command/modReq
	  command_string =  "modReq {";
#.END

#.FN_HDR Command/subtractReq
	  command_string =  "subtractReq {";
#.END

#.FN_HDR Command/auditCapRequest
	  command_string =  "auditCapRequest {";
#.END

#.FN_HDR Command/auditValueRequest
	  command_string =  "auditValueRequest {";
#.END

#.FN_HDR Command/notifyReq
	  command_string =  "notifyReq {";
#.END

#.FN_HDR Command/ServiceChangeRequest
	  command_string =  "serviceChangeReq {";
#.END

#.FN_HDR CommandReply/addReply
	  command_string =  "addReply {";
#.END

#.FN_HDR CommandReply/moveReply
	  command_string =  "moveReply {";
#.END

#.FN_HDR CommandReply/addReply
	  command_string =  "addReply {";
#.END

#.FN_HDR CommandReply/modReply
	  command_string =  "modReply {";
#.END

#.FN_HDR CommandReply/notifyReply
	  command_string =  "notifyReply {";
#.END

#.FN_HDR CommandReply/subtractReply
	  command_string =  "subtractReply {";
#.END

#.FN_HDR CommandReply/auditCapReply
	  command_string =  "auditCapReply {";
#.END

#.FN_HDR CommandReply/auditValueReply
	  command_string =  "auditValueReply {";
#.END

#.FN_HDR TerminationID
	  if (check_col(pinfo->cinfo, COL_INFO) && command_string != NULL ) col_append_str(pinfo->cinfo, COL_INFO, command_string);
	  it_is_wildcard = FALSE;
#.END

#.FN_FTR TerminationID
	if (check_col(pinfo->cinfo, COL_INFO) && command_string != NULL ) col_append_str(pinfo->cinfo, COL_INFO, "}");
	it_is_wildcard = FALSE;
#.END

#.FN_HDR WildcardField
	  if (check_col(pinfo->cinfo, COL_INFO) && command_string != NULL ) col_append_str(pinfo->cinfo, COL_INFO, "*");
	  it_is_wildcard = TRUE;
#.END

#.FN_BODY TerminationID/id
	tvbuff_t* new_tvb;
	offset = dissect_ber_octet_string(implicit_tag, pinfo, tree, tvb, offset, hf_index, &new_tvb);
	
	  if (command_string != NULL  && ! it_is_wildcard && check_col(pinfo->cinfo, COL_INFO))
		col_append_str(pinfo->cinfo, COL_INFO, bytes_to_str(tvb_get_ptr(tvb,0,tvb->length),tvb->length));
	
#.END

#.TYPE_ATTR
IP4Address/address  TYPE = FT_IPv4  DISPLAY = BASE_NONE  STRINGS = NULL
IP6Address/address  TYPE = FT_IPv6  DISPLAY = BASE_NONE  STRINGS = NULL
ActionRequest/contextId TYPE = FT_UINT32 DISPLAY = BASE_HEX STRINGS = NULL
ActionReply/contextId TYPE = FT_UINT32 DISPLAY = BASE_HEX STRINGS = NULL
