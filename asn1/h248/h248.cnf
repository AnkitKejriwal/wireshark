# h248.cnf
# H.248 conformation file

# $Id$

#.MODULE_IMPORT

#.EXPORTS

#.PDU

#.NO_EMIT
MtpAddress
PkgdName
PropertyID
SignalName
EventName
ContextID
ErrorCode

#.TYPE_RENAME
IndAudMediaDescriptor/streams			indAudMediaDescriptorStreams
ActionRequest/contextId					contextId
ActionReply/contextId					contextId
TransactionRequest/transactionId		transactionId
TransactionPending/transactionId		transactionId
TransactionReply/transactionId			transactionId

#.FIELD_RENAME
IP4Address/address		iP4Address
IP6Address/address		iP6Address
ContextAttrAuditRequest/emergency	cAAREmergency
ContextAttrAuditRequest/priority	cAARPriority
SecondRequestedEvent/eventAction	secondaryEventAction
TerminationStateDescriptor/eventBufferControl	tSEventBufferControl
SecondEventsDescriptor/eventList	secondaryEventList
IndAudEventBufferDescriptor/eventName	iAEBDEventName
TerminationID/id			terminationId
IndAudStreamParms/localControlDescriptor iASPLocalControlDescriptor
IndAudStreamParms/localDescriptor	iASPLocalDescriptor
MediaDescriptor/streams/oneStream	mediaDescriptorOneStream
MediaDescriptor/streams/multiStream	mediaDescriptorMultiStream
MediaDescriptor/streams/multiStream/_item	mediaDescriptorMultiStream_item
DomainName/name				domName
IndAudEventsDescriptor/pkgdName		iAEDPkgdName
IndAudLocalRemoteDescriptor/propGrps	iAPropertyGroup
IndAudLocalControlDescriptor/propertyParms	indAudPropertyParms
IndAudTerminationStateDescriptor/propertyParms	indAudPropertyParms
IndAudLocalControlDescriptor/reserveGroup	iALCDReserveGroup
IndAudLocalControlDescriptor/reserveValue	iALCDReserveValue
IndAudLocalControlDescriptor/streamMode		iALCDStreamMode
IndAudStreamDescriptor/streamParms		indAudStreamParms
IndAudMediaDescriptor/termStateDescr		indAudTerminationStateDescriptor
IndAudSignal/signalName				iASignalName
IndAudSeqSigList/signalList			iASignalList
IndAudSignalsDescriptor/signal			indAudSignal
IndAudSignalsDescriptor/seqSigList		indAudSeqSigList
IndAudTerminationStateDescriptor/serviceState   iATSDServiceState
IndAudStreamParms/remoteDescriptor		iASPRemoteDescriptor
PropertyParm/value				propertyParamValue
IndAudMediaDescriptor/streams			indAudMediaDescriptorStreams
AmmRequest/terminationID			terminationIDList
AmmsReply/terminationID			terminationIDList
SubtractRequest/terminationID			terminationIDList
NotifyRequest/terminationID			terminationIDList
NotifyReply/terminationID			terminationIDList
ServiceChangeRequest/terminationID			terminationIDList
ServiceChangeReply/terminationID			terminationIDList


#.FN_BODY TransactionRequest/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY TransactionPending/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY TransactionReply/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY TransactionResponseAck/transactionId
	offset = dissect_h248_trx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_HDR Command
    h248_cmdmsg = ep_alloc0(sizeof(h248_cmdmsg_info_t));
    h248_cmdmsg->offset = offset;
    h248_cmdmsg->transaction_id = transaction_id;
    h248_cmdmsg->context_id = context_id;
    h248_cmdmsg->cmd_type = H248_CMD_NONE;
    h248_cmdmsg->msg_type = H248_TRX_REQUEST;
    h248_cmdmsg->term_is_wildcard = FALSE;
#.END

#.FN_FTR Command
    if (check_col(pinfo->cinfo, COL_INFO)) col_set_str(pinfo->cinfo, COL_INFO, cmd_str(h248_cmdmsg));
    
    if (keep_persistent_data) {
        cmdmsg_tree(h248_cmdmsg);
        analyze_h248_cmd(pinfo,h248_cmdmsg);
        analysis_tree(pinfo, tvb, h248_tree, h248_cmdmsg);
    }
#.END

#.FN_HDR CommandReply
    h248_cmdmsg = ep_alloc0(sizeof(h248_cmdmsg_info_t));
    h248_cmdmsg->offset = offset;
    h248_cmdmsg->transaction_id = transaction_id;
    h248_cmdmsg->context_id = context_id;
    h248_cmdmsg->cmd_type = H248_CMD_NONE;
    h248_cmdmsg->msg_type = H248_TRX_REPLY;
    h248_cmdmsg->term_is_wildcard = FALSE;
#.END

#.FN_FTR CommandReply
    if (check_col(pinfo->cinfo, COL_INFO)) col_set_str(pinfo->cinfo, COL_INFO, cmd_str(h248_cmdmsg));    
    if (keep_persistent_data) {
        cmdmsg_tree(h248_cmdmsg);
        analyze_h248_cmd(pinfo,h248_cmdmsg);
        analysis_tree(pinfo, tvb, h248_tree, h248_cmdmsg);
    }
#.END

#.FN_BODY ActionRequest/contextId
	offset = dissect_h248_ctx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_BODY ActionReply/contextId
	offset = dissect_h248_ctx_id(implicit_tag, pinfo, tree, tvb, offset);
#.END

#.FN_HDR Command/addReq
	  h248_cmdmsg->cmd_type = H248_CMD_ADD;
#.END

#.FN_HDR Command/moveReq
	  h248_cmdmsg->cmd_type = H248_CMD_MOVE;
#.END

#.FN_HDR Command/modReq
	  h248_cmdmsg->cmd_type = H248_CMD_MOD;
#.END

#.FN_HDR Command/subtractReq
	  h248_cmdmsg->cmd_type = H248_CMD_SUB;
#.END

#.FN_HDR Command/auditCapRequest
	  h248_cmdmsg->cmd_type = H248_CMD_AUDITCAP;
#.END

#.FN_HDR Command/auditValueRequest
	  h248_cmdmsg->cmd_type = H248_CMD_AUDITVAL;
#.END

#.FN_HDR Command/notifyReq
	  h248_cmdmsg->cmd_type = H248_CMD_NOTIFY;
#.END

#.FN_HDR Command/ServiceChangeRequest
	  h248_cmdmsg->cmd_type = H248_CMD_SVCCHG;
#.END

#.FN_HDR CommandReply/addReply
	  h248_cmdmsg->cmd_type = H248_CMD_ADD;
#.END

#.FN_HDR CommandReply/moveReply
	  h248_cmdmsg->cmd_type = H248_CMD_MOVE;
#.END

#.FN_HDR CommandReply/modReply
	  h248_cmdmsg->cmd_type = H248_CMD_MOD;
#.END

#.FN_HDR CommandReply/subtractReply
	  h248_cmdmsg->cmd_type = H248_CMD_SUB;
#.END

#.FN_HDR CommandReply/notifyReply
	  h248_cmdmsg->cmd_type = H248_CMD_NOTIFY;
#.END

#.FN_HDR CommandReply/ServiceChangeReply
	  h248_cmdmsg->cmd_type = H248_CMD_SVCCHG;
#.END

#.FN_HDR CommandReply/auditCapReply
	  h248_cmdmsg->cmd_type = H248_CMD_AUDITCAP;
#.END

#.FN_HDR CommandReply/auditValueReply
	  h248_cmdmsg->cmd_type = H248_CMD_AUDITVAL;
#.END

#.FN_HDR WildcardField
    h248_cmdmsg->term_is_wildcard = TRUE;
#.END

#.FN_BODY ErrorDescriptor/errorCode
    guint32 val;
    
    val = 0;
    offset = dissect_ber_integer(implicit_tag, pinfo, tree, tvb, offset, hf_h248_error_code, &val);
    h248_cmdmsg->error_code = val;
    
    return offset;
#.END

#.FN_BODY TerminationID/id
	tvbuff_t* new_tvb;
	offset = dissect_ber_octet_string(implicit_tag, pinfo, tree, tvb, offset, hf_index, &new_tvb);
	
    h248_cmdmsg->term_id = bytes_to_str(tvb_get_ptr(tvb,0,tvb->length),tvb->length);

	if (new_tvb && h248_term_handle) {
		call_dissector(h248_term_handle, new_tvb, pinfo, tree);
	}
	
#.END

#.TYPE_ATTR
IP4Address/address  TYPE = FT_IPv4  DISPLAY = BASE_NONE  STRINGS = NULL
IP6Address/address  TYPE = FT_IPv6  DISPLAY = BASE_NONE  STRINGS = NULL
ActionRequest/contextId TYPE = FT_UINT32 DISPLAY = BASE_HEX STRINGS = NULL
ActionReply/contextId TYPE = FT_UINT32 DISPLAY = BASE_HEX STRINGS = NULL
