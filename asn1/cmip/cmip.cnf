# cmip.cnf
# CMIP conformation file

# $Id$

#.INCLUDE ../acse/acse-exp.cnf

#.MODULE
Remote-Operations-Information-Objects cmip.ros
Attribute-ASN1Module cmip.x721


#.OMIT_ASSIGNMENT Remote-Operations-Information-Objects
Bind
Unbind
#.END

#.MAKE_ENUM
Code/local

#.TYPE_RENAME

Invoke/argument             InvokeArgument
ReturnResult/result/result  ResultArgument

#.FIELD_RENAME

Invoke/linkedId/present     linkedIdPresent

Reject/problem/invoke       invokeProblem
Reject/problem/returnError  returnErrorProblem
Reject/problem/returnResult returnResultProblem

ReturnResult/result/result  resultArgument

#.EXPORTS
CMIPAbortInfo
CMIPUserInfo
ROS
InvokeIDType
ObjectInstance
ObjectClass
Attribute
RDNSequence

#.REGISTER
# X.721
LogRecordId				B "2.9.3.2.7.3"  "logRecordId(3)"
SystemId				B "2.9.3.2.7.4"  "systemId(4)"
SystemTitle				B "2.9.3.2.7.5"  "systemTitle(5)"
AdditionalText			B "2.9.3.2.7.7"  "additionalText(7)"
BackedUpStatus			B "2.9.3.2.7.11"  "backedUpStatus(11)"
# Currently in the GNM dissector
#AdministrativeState	B "2.9.3.2.7.31" "administrativeState(31)"
#ControlStatus			B "2.9.3.2.7.34" "controlStatus(34)"
UsageState				B "2.9.3.2.7.39" "usageState(39)"
OperationalState		B "2.9.3.2.7.35" "operationalState(35)"
Allomorphs				B "2.9.3.2.7.50" "allomorphs(50)"
Destination				B "2.9.3.2.7.55" "destination(55)"
DiscriminatorConstruct	B "2.9.3.2.7.56" "discriminatorConstruct(56)"
NameBinding				B "2.9.3.2.7.63" "nameBinding(63)"
ObjectClass				B "2.9.3.2.7.65" "objectClass(65)"
# Currently in the GNM dissector
#Packages				B "2.9.3.2.7.66""packages(66)"


#.NO_EMIT

#.PDU

#.TYPE_RENAME

#.FIELD_RENAME
SetArgument/modificationList/_item/attributeValue attributevalue

#.FN_HDR CMIPAbortInfo
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_append_fstr(actx->pinfo->cinfo, COL_INFO, "CMIP-A-ABORT");
  }
#.END

#.FN_HDR CMIPUserInfo
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_append_fstr(actx->pinfo->cinfo, COL_INFO, "CMIP-A-ASSOCIATE");
  }
#.END

#.FN_BODY CMIPAbortSource  VAL_PTR = &value
  guint32 value;

  %(DEFAULT_BODY)s
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_append_fstr(actx->pinfo->cinfo, COL_INFO, " AbortSource:%%s", val_to_str(value, cmip_CMIPAbortSource_vals, " Unknown AbortSource:%%d"));
  }
#.END

#.FN_BODY Code/local  VAL_PTR = &opcode
  %(DEFAULT_BODY)s
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "%%s", val_to_str(opcode, cmip_Opcode_vals, " Unknown Opcode:%%d"));
  }
#.END

#.FN_HDR Invoke
  opcode_type=OPCODE_INVOKE;
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "Invoke ");
  }
#.END

#.FN_HDR ReturnResult
  opcode_type=OPCODE_RETURN_RESULT;
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "ReturnResult ");
  }
#.END

#.FN_HDR ReturnError
  opcode_type=OPCODE_RETURN_ERROR;
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "ReturnError ");
  }
#.END

#.FN_HDR Reject
  opcode_type=OPCODE_REJECT;
  if(check_col(actx->pinfo->cinfo, COL_INFO)){
    col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "Reject ");
  }
#.END

#.FN_BODY AttributeId/globalForm  FN_VARIANT = _str  VAL_PTR = &attribute_identifier_id
  attributeform = ATTRIBUTE_GLOBAL_FORM;
  %(DEFAULT_BODY)s

#.FN_BODY AttributeId/localForm
  attributeform = ATTRIBUTE_LOCAL_FORM;
  offset = dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_cmip_localForm, NULL);

#.FN_BODY Attribute/value
  /*XXX handle local form here */
  if(attributeform==ATTRIBUTE_GLOBAL_FORM){
    offset=call_ber_oid_callback(attribute_identifier_id, tvb, offset, actx->pinfo, tree);
  }
#.FN_PARS AttributeValueAssertion/id
	FN_VARIANT = _str  VAL_PTR = &attributevalueassertion_id

#.FN_BODY AttributeValueAssertion/value
    offset=call_ber_oid_callback(attributevalueassertion_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY Invoke/argument
    switch(opcode){
    case 0: /* M-eventreport */
      offset = dissect_cmip_EventReportArgument(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 1: /* M-eventreport-confirmed */
      offset = dissect_cmip_EventReportArgument(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 2: /* M-linkedreply */
      offset = dissect_cmip_LinkedReplyArgument(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 3: /* M-get */
      offset = dissect_cmip_GetArgument(FALSE, tvb, offset,actx, tree, -1);
      break;
    case 4: /* M-set */
      offset = dissect_cmip_SetArgument(FALSE, tvb, offset,actx, tree, -1);
      break;
    case 5: /* M-set-confirmed */
      offset = dissect_cmip_SetArgument(FALSE, tvb, offset,actx, tree, -1);
      break;
    case 6: /* M-action*/
      offset = dissect_cmip_ActionArgument(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 7: /* M-action-confirmed*/
      offset = dissect_cmip_ActionArgument(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 8: /* M-create*/
      offset = dissect_cmip_CreateArgument(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 9: /* M-delete*/
      offset = dissect_cmip_DeleteArgument(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 10: /* M-cancelget */
      offset = dissect_cmip_InvokeIDType(FALSE, tvb,  offset, actx, tree, -1);
      break;
    }
    

#.FN_BODY ReturnResult/result/result

    switch(opcode){
    case 0: /* M-eventreport*/
      break;  /* No return data */
    case 1: /* M-eventreport-confirmed */
      offset = dissect_cmip_EventReportResult(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 2: /* M-linkedreply*/
      break;  /* No return data */
    case 3: /* M-get */
      offset = dissect_cmip_GetResult(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 4: /* M-set */
      break;  /* No return data */
    case 5: /* M-set-confirmed*/
      offset = dissect_cmip_SetResult(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 6: /* M-action*/
      break;  /* No return data */
    case 7: /* M-action-confirmed*/
      offset = dissect_cmip_ActionResult(FALSE, tvb, offset, actx, tree, -1);
      break;
    case 8: /* M-create*/
      offset = dissect_cmip_CreateResult(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 9: /* M-delete*/
      offset = dissect_cmip_DeleteResult(FALSE, tvb,  offset, actx, tree, -1);
      break;
    case 10: /* M-cancelget */
      break; /* doe this one return any data? */
    }
  /*XXX add more types here */
 
#.FN_BODY ReturnError/parameter
/* TODO: add code here */

#.FN_HDR ObjectClass/globalForm
  objectclassform = OBJECTCLASS_GLOBAL_FORM;
#.FN_PARS ObjectClass/globalForm
  FN_VARIANT = _str  VAL_PTR = &objectclass_identifier_id

#.FN_HDR ObjectClass/localForm
  objectclassform = OBJECTCLASS_LOCAL_FORM;

#.FN_PARS ActionTypeId/globalForm
  FN_VARIANT = _str  HF_INDEX = hf_cmip_actionType_OID  VAL_PTR = &object_identifier_id

#.FN_BODY ActionInfo/actionInfoArg
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_PARS EventTypeId/globalForm
  FN_VARIANT = _str  HF_INDEX = hf_cmip_eventType_OID  VAL_PTR = &object_identifier_id

#.FN_BODY EventReportArgument/eventInfo
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY EventReply/eventReplyInfo
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY SetArgument/modificationList/_item/attributeValue
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_PARS SpecificErrorInfo/errorId
  FN_VARIANT = _str  HF_INDEX = hf_cmip_errorId_OID  VAL_PTR = &object_identifier_id

#.FN_BODY SpecificErrorInfo/errorInfo
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY AttributeError/attributeValue
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY InvalidArgumentValue/eventValue/eventInfo

  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);
#.FN_BODY ActionReply/actionReplyInfo
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);


# X.721
#.FN_PARS ManagementExtension/identifier FN_VARIANT = _str  VAL_PTR = &object_identifier_id

#.FN_BODY ManagementExtension/information
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY AttributeValueChangeDefinition/_item/oldAttributeValue
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_BODY AttributeValueChangeDefinition/_item/newAttributeValue
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_PARS ServiceUser/identifier FN_VARIANT = _str  VAL_PTR = &object_identifier_id

#.FN_BODY ServiceUser/details
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);

#.FN_PARS SupportedFeatures/_item/featureIdentifier FN_VARIANT = _str  VAL_PTR = &object_identifier_id

#.FN_BODY SupportedFeatures/_item/featureInfo
  offset=call_ber_oid_callback(object_identifier_id, tvb, offset, actx->pinfo, tree);


#.END
