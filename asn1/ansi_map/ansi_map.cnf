# ansi_map.cnf
# ansi_map conformation file
# Copyright 2005-2007 Anders Broman 
# $Id$

#.INCLUDE ../gsmmap/gsm_map-exp.cnf
#.EXPORTS

#.PDU
AuthenticationDirective
AuthenticationDirectiveRes

OriginationRequest
OriginationRequestRes

#.NO_EMIT

#.TYPE_RENAME

#.FIELD_RENAME

#.FN_BODY InvokeParameters
  gint   *opcode;
  struct tcap_private_t * p_private_tcap;

  /* Data from the TCAP dissector */
  if (pinfo->private_data != NULL){
	  p_private_tcap=pinfo->private_data;
	  opcode = g_malloc(sizeof(gint));
	  OperationCode = OperationCode&0x00ff;
	  *opcode = OperationCode;
	  if ((!pinfo->fd->flags.visited)&&(p_private_tcap->TransactionID_str))
		  /* Only do this once XXX I hope its the right thing to do */
		  g_hash_table_insert(TransactionId_table, g_strdup(p_private_tcap->TransactionID_str), opcode);
  }

  ansi_map_is_invoke = TRUE;	
  if (check_col(pinfo->cinfo, COL_INFO)){
	  col_set_str(pinfo->cinfo, COL_INFO, val_to_str(OperationCode, ansi_map_opr_code_strings, "Unknown ANSI-MAP PDU (%u)"));
  }
  /* No Data */
  if(tvb_length_remaining(tvb, offset)<=0){
	  return offset;

  }
	proto_tree_add_item(tree, hf_ansi_map_invokeParameters, tvb, offset,-1,FALSE);
	offset = dissect_invokeData(pinfo, tree, tvb, offset);

#.FN_BODY ReturnParameters
  gint   *opcode;
  struct tcap_private_t *p_private_tcap;
  proto_item *item;

  /* Data from the TCAP dissector */
  if (pinfo->private_data != NULL){
	  p_private_tcap=pinfo->private_data;
	  opcode = g_hash_table_lookup(TransactionId_table, p_private_tcap->TransactionID_str);
	  if(opcode){
		  OperationCode = *opcode;
	  }else{
		  OperationCode = OperationCode & 0x00ff;
	  }
  }else{
	  OperationCode = OperationCode & 0x00ff;
  }
  if (check_col(pinfo->cinfo, COL_INFO)){
	  col_clear(pinfo->cinfo, COL_INFO);
	  col_add_fstr(pinfo->cinfo, COL_INFO,"%s Response", val_to_str(OperationCode, ansi_map_opr_code_strings, "Unknown ANSI-MAP PDU (%u)"));
  }
  /* No Data */
  if(tvb_length_remaining(tvb, offset)<=0){
	  return offset;
  }

  item = proto_tree_add_text(tree, tvb, 0, -1, "OperationCode %s",val_to_str(OperationCode, ansi_map_opr_code_strings, "Unknown %u"));
  PROTO_ITEM_SET_GENERATED(item);

  proto_tree_add_item(tree, hf_ansi_map_returnResult, tvb, offset,-1,FALSE);
  offset = dissect_returnData(pinfo, tree, tvb, offset);

#.FN_BODY ErrorParameters

#.FN_BODY RejectParameters

#.FN_BODY PrivateOperationCode VAL_PTR = &OperationCode
 %(DEFAULT_BODY)s
 proto_tree_add_item(tree, hf_ansi_map_op_code_fam, tvb, offset-2,1,FALSE);
 proto_tree_add_item(tree, hf_ansi_map_op_code, tvb, offset-1,1,FALSE);

#.FN_BODY MINType VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_min_type(parameter_tvb,pinfo,tree);
	}

#.FN_BODY DigitsType VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_digits_type(parameter_tvb,pinfo,tree);
	}

#.FN_BODY Subaddress VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_subaddress(parameter_tvb,pinfo,tree);
	}

# 6.5.2.3 AlertCode
#.FN_BODY AlertCode VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_alertcode(parameter_tvb,pinfo,tree);
	}

# 6.5.2.5 AnnouncementCode
#.FN_BODY AnnouncementCode VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_announcementcode(parameter_tvb,pinfo,tree);
	}

# 6.5.2.14 AuthorizationPeriod
#.FN_BODY AuthorizationPeriod VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_authorizationperiod(parameter_tvb,pinfo,tree);
	}


# 6.5.2.16 BillingID
#.FN_BODY BillingID VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_billingid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.20 CallingFeaturesIndicator
#.FN_BODY CallingFeaturesIndicator VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_callingfeaturesindicator(parameter_tvb,pinfo,tree);
	}
# 6.5.2.29 CDMACallMode
#.FN_BODY CDMACallMode VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_cdmacallmode(parameter_tvb,pinfo,tree);
	}
# 6.5.2.30 CDMAChannelData
#.FN_BODY CDMAChannelData VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_cdmachanneldata(parameter_tvb,pinfo,tree);
	}

# 6.5.2.41 CDMAStationClassMark
#.FN_BODY CDMAStationClassMark VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_cdmastationclassmark(parameter_tvb,pinfo,tree);
	}

# 6.5.2.47 ChannelData
#.FN_BODY ChannelData VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_channeldata(parameter_tvb,pinfo,tree);
	}

# 6.5.2.50 ConfidentialityModes
#.FN_BODY ConfidentialityModes VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_confidentialitymodes(parameter_tvb,pinfo,tree);
	}

# 6.5.2.53 DeniedAuthorizationPeriod
#.FN_BODY DeniedAuthorizationPeriod VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_deniedauthorizationperiod(parameter_tvb,pinfo,tree);
	}

# 6.5.2.64 ExtendedMSCID
#.FN_BODY ExtendedMSCID VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_extendedmscid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.65 ExtendedSystemMyTypeCode
#.FN_BODY ExtendedSystemMyTypeCode VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_extendedsystemmytypecode(parameter_tvb,pinfo,tree);
	}
#6.5.2.71 HandoffState
#.FN_BODY HandoffState VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_handoffstate(parameter_tvb,pinfo,tree);
	}

# 6.5.2.72 InterMSCCircuitID
#.FN_BODY InterMSCCircuitID VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_intermsccircuitid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.78 MessageWaitingNotificationCount 
#.FN_BODY MessageWaitingNotificationCount VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_messagewaitingnotificationcount(parameter_tvb,pinfo,tree);
	}

# 6.5.2.79 MessageWaitingNotificationType
#.FN_BODY MessageWaitingNotificationType VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_messagewaitingnotificationtype(parameter_tvb,pinfo,tree);
	}


# 6.5.2.82 MSCID
#.FN_BODY MSCID VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_mscid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.84 MSLocation
#.FN_BODY MSLocation VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_mscid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.85 NAMPSCallMode
#.FN_BODY NAMPSCallMode VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_nampscallmode(parameter_tvb,pinfo,tree);
	}

# 6.5.2.86 NAMPSChannelData
#.FN_BODY NAMPSChannelData VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_nampschanneldata(parameter_tvb,pinfo,tree);
	}

# 6.5.2.88 OneTimeFeatureIndicator
#.FN_BODY OneTimeFeatureIndicator VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_onetimefeatureindicator(parameter_tvb,pinfo,tree);
	}

# 6.5.2.90 OriginationTriggers
#.FN_BODY OriginationTriggers VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_originationtriggers(parameter_tvb,pinfo,tree);
	}

# 6.5.2.91 PACAIndicator
#.FN_BODY PACAIndicator VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_pacaindicator(parameter_tvb,pinfo,tree);
	}

# 6.5.2.93 PC_SSN
#.FN_BODY PC-SSN VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_pc_ssn(parameter_tvb,pinfo,tree);
	}

# 6.5.2.94 PilotBillingID
#.FN_BODY PilotBillingID VAL_PTR = &parameter_tvb

	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_pilotbillingid(parameter_tvb,pinfo,tree);
	}

# 6.5.2.124
#.FN_BODY SMS-BearerData VAL_PTR = &SMS_BearerData_tvb
	SMS_BearerData_tvb = NULL;

%(DEFAULT_BODY)s

# 6.5.2.137
# N.S0005-0 v 1.0
#.FN_BODY SMS-TeleserviceIdentifier VAL_PTR = &parameter_tvb

tvbuff_t *parameter_tvb = NULL;
static gint32 ansi_map_sms_tele_id = -1;

%(DEFAULT_BODY)s
	if (parameter_tvb){
		ansi_map_sms_tele_id = tvb_get_ntohs(tvb,0);
		if ((ansi_map_sms_tele_id != -1)&&(SMS_BearerData_tvb !=NULL))
		{
		    dissector_try_port(is637_tele_id_dissector_table, ansi_map_sms_tele_id, SMS_BearerData_tvb, g_pinfo, g_tree);
		    ansi_map_sms_tele_id = -1;
		}
	}

# 6.5.2.146 SystemCapabilities */
# Updated in N.S0008-0 v 1.0 */
#.FN_BODY SystemCapabilities VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_systemcapabilities(parameter_tvb,pinfo,tree);
	}


# 6.5.2.159 TerminationTriggers
#.FN_BODY TerminationTriggers VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_terminationtriggers(parameter_tvb,pinfo,tree);
	}

# 6.5.2.160 TransactionCapability
#.FN_BODY TransactionCapability VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_transactioncapability(parameter_tvb,pinfo,tree);
	}

# 6.5.2.f (TSB76) CDMAServiceOption N.S0010-0 v 1.0
#.FN_BODY CDMAServiceOption VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_cdmaserviceoption(parameter_tvb,pinfo,tree);
	}

# 6.5.2.aj SecondInterMSCCircuitID
# -- XXX Same code as ISLPinformation???

# 6.5.2.bw CallingPartyName N.S0012-0 v 1.0
#.FN_BODY CallingPartyName VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_callingpartyname(parameter_tvb,pinfo,tree);
	}

# 6.5.2.df TriggerCapability
#.FN_BODY TriggerCapability VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_triggercapability(parameter_tvb,pinfo,tree);
	}

# 6.5.2.dj WINOperationsCapability
#.FN_BODY WINOperationsCapability VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_winoperationscapability(parameter_tvb,pinfo,tree);
	}

# 6.5.2.ek ControlNetworkID
#.FN_BODY ControlNetworkID VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		dissect_ansi_map_controlnetworkid(parameter_tvb,pinfo,tree);
	}

#6.5.2.wB ServiceIndicator
#.FN_BODY ServiceIndicator VAL_PTR = &parameter_tvb
	tvbuff_t *parameter_tvb = NULL;
	guint8 ServiceIndicator;
%(DEFAULT_BODY)s
	if (parameter_tvb){
		if (SMS_BearerData_tvb !=NULL)
		{
			ServiceIndicator = tvb_get_guint8(parameter_tvb,0);
			switch(ServiceIndicator){
				case 1: /* CDMA OTASP Service */
				case 3: /* CDMA OTAPA Service */
					dissector_try_port(is683_dissector_table, ansi_map_is_invoke ? 0 : 1, SMS_BearerData_tvb, g_pinfo, g_tree);
					break;
				case 4: /* CDMA Position Determination Service */
					dissector_try_port(is801_dissector_table, ansi_map_is_invoke ? 0 : 1, SMS_BearerData_tvb, g_pinfo, g_tree);
					break;
				default:
					break;
			}
		}
	}
	 
#.TYPE_ATTR
ActionCode   TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_ActionCode_vals)
AuthenticationCapability TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_AuthenticationCapability_vals) 
AlertResult   TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_AlertResult_result_vals)
AvailabilityType TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_AvailabilityType_vals)
CancellationType TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_CancellationType_vals)
GeographicAuthorization TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_GeographicAuthorization_vals)

CountUpdateReport TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_CountUpdateReport_vals)
ControlChannelMode  TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_ControlChannelMode_vals)
PageIndicator  TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_PageIndicator_vals)
SMS-AccessDeniedReason  TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_SMS_AccessDeniedReason_vals)
SMS-CauseCode  TYPE = FT_UINT8  DISPLAY = BASE_DEC  STRINGS = VALS(ansi_map_SMS_CauseCode_vals)
SMS-ChargeIndicator TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_SMS_ChargeIndicator_vals)
SMS-NotificationIndicator TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_SMS_NotificationIndicator_vals)
#SMS-TeleserviceIdentifier TYPE = FT_UINT16  DISPLAY = BASE_DEC STRINGS = VALS(ansi_map_SMS_TeleserviceIdentifier_vals)
TDMABandwidth TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x0f STRINGS = VALS(ansi_map_TDMABandwidth_vals)
TDMAServiceCode TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_TDMAServiceCode_vals)
OTASP-ResultCode TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_OTASP_ResultCode_vals)
ServiceIndicator TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_ServiceIndicator_vals)
TerminationAccessType TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_TerminationAccessType_vals)
TerminationTreatment  TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_TerminationTreatment_vals)
SignalingMessageEncryptionReport TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_SMEReport_vals)
VoicePrivacyReport TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_VoicePrivacyReport_vals)
PreferredLanguageIndicator TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_PreferredLanguageIndicator_vals)
SetupResult TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_SetupResult_vals)
UniqueChallengeReport TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_UniqueChallengeReport_vals)
ISLPInformation TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_islp_type_vals)
ServiceRedirectionCause  TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_ServiceRedirectionCause_type_vals)
SSDUpdateReport   TYPE = FT_UINT16  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_SSDUpdateReport_vals)
ReauthenticationReport   TYPE = FT_UINT8  DISPLAY = BASE_DEC   STRINGS = VALS(ansi_map_ReauthenticationReport_vals)
MSIDUsage TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x03 STRINGS = VALS(ansi_MSIDUsage_m_or_i_vals)
BSMCStatus  TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x03 STRINGS = VALS(ansi_map_BSMCStatus_vals)
PagingFrameClass   TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x03 STRINGS = VALS(ansi_map_PagingFrameClass_vals)
ServicesResult TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x03 STRINGS = VALS(ansi_map_ServicesResult_ppr_vals)
SOCStatus TYPE = FT_UINT8  DISPLAY = BASE_DEC  BITMASK = 0x03 STRINGS = VALS(ansi_map_SOCStatus_vals)
#.END
