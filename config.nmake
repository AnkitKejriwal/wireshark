# $Id$

# Some more informations about the settings in this file, can be found 
# in the file README.win32 and the Developer's Guide (available online).



##### Versions #####

# The current Wireshark version
# It's highly recommended to leave MAJOR/MINOR/MICRO unchanged
VERSION_MAJOR=0
VERSION_MINOR=99
VERSION_MICRO=5
# It's recommended to change VERSION_EXTRA for your own custom builds
# e.g. "-SVN-12345"
VERSION_EXTRA=

# The version of the wiretap library (recommended: leave unchanged)
WTAP_VERSION_MAJOR=0
WTAP_VERSION_MINOR=3
WTAP_VERSION_MICRO=1



##### Microsoft Visual C / Studio Variant #####
# for the different Studios, see: http://en.wikipedia.org/wiki/Microsoft_Visual_Studio
# only one of the following MSVC_VARIANT settings should be used

# "Microsoft Visual Studio 6.0" - THE ONLY RECOMMENDED
# Visual C++ 6.0, _MSC_VER 1200, msvcrt.dll (version 6)
MSVC_VARIANT=MSVC6

# "Microsoft Visual Studio .NET (2002)" - NOT YET WORKING
# Visual C++ 7.0, _MSC_VER 1300, msvcr70.dll
#MSVC_VARIANT=MSVC2002

# "Microsoft Visual Studio .NET 2003" - NOT YET WORKING
# Visual C++ 7.1, _MSC_VER 1310, msvcr71.dll
#MSVC_VARIANT=MSVC2003

# "Microsoft Visual C++ Toolkit 2003" - NOT YET WORKING
# needs additional Platform SDK installation
# Visual C++ 7.1, _MSC_VER 1310, msvcr71.dll
#MSVC_VARIANT=VC2003TOOLKIT

# "Microsoft Visual Studio 2005" - NOT YET WORKING
# "Microsoft Visual C++ 2005 Express Edition" - EXPERIMENTAL
# The "Express Edition" needs additional Platform SDK installation
# Visual C++ 8.0, _MSC_VER 1400, msvcr80.dll
#MSVC_VARIANT=MSVC2005



##### Libraries #####

# 
# Base directory, where your libraries reside, which needs to be 
# compiling the sources. This setting is used only inside this file.
#
WIRESHARK_LIBS=C:\wireshark-win32-libs

#
# Mandatory: GLib settings
#
# Current versions of GTK+ 1.3 require GLib 2.0.  Earlier versions of
# GTK+ 1.3 are buggy; we don't recommend using them, and we don't
# support them.  Upgrade to at least GLib 2.0.
#
GLIB_VERSION=2.0
GLIB_DIR=$(WIRESHARK_LIBS)\glib

#
# Mandatory: GTK (& related) settings
#
# It's possible, to build both GTK version 1 and 2 at the same time,
# or only one of the versions. GTK version 2 is recommended.
# 
# If you want building with GTK+ 1.3, set GTK1_DIR to the pathname of the 
# "gtk+" directory; if you want building with GTK+ 2.x, set GTK2_DIR to 
# the pathname of the directory in which the "include" and "lib" directories 
# reside.
#
GTK1_DIR=$(WIRESHARK_LIBS)\gtk+
GTK2_DIR=$(WIRESHARK_LIBS)\gtk2

#
# Mandatory for GTK >= 2: Version numbers of gtk2 and pango.
#
# (MAJOR + MINOR Version number but without MICRO version number) 
# These macros are used by the nsis installer script and by the setup target.
#
# GTK 2.6 is the mainline since Ethereal 0.10.14
#GTK2_INST_VERSION=2.6
#PANGO_INST_VERSION=1.8
# Support for GTK 2.8 
#GTK2_INST_VERSION=2.8
#PANGO_INST_VERSION=1.14
# Support for GTK 2.10 is currently experimental ...
GTK2_INST_VERSION=2.10
PANGO_INST_VERSION=1.14

#
# If you have GTK-Wimp, set this to the pathname of the directory in
# which the files are stored.
#
# If you don't have GTK-Wimp, comment this line out, so that GTK-Wimp isn't
# defined.
#
# Please note: GTK 2.8 (and later?) includes GTK-Wimp
# (in this case these GTK-Wimp related settings will have no effect)
#
GTK_WIMP_DIR=$(WIRESHARK_LIBS)\gtk-wimp\gtk-wimp-0.7.0-bin

#
# Optional: WinPcap developer's pack to capture network traffic.
#
# The WinPcap developer's pack version Wireshark is build with.
#
# If you don't have the WPdpack, comment this line out, so that 
# WINPCAP_VERSION isn't defined.
#
#WINPCAP_VERSION=3.0
WINPCAP_VERSION=3.1
# XXX - what to set for 4.0 beta 1?
#
# If you have the WinPcap developer's pack, set this to the directory 
# in which the WinPcap developer's pack resides.
#
# If you don't have the WPdpack, comment this line out, so that 
# PCAP_DIR isn't defined.
#
PCAP_DIR=$(WIRESHARK_LIBS)\WPdpack

#
# Optional: The ZLib enables unzipping of gzip compressed capture files 
# "on the fly".
#
# If you have Zlib, set this to directory in which the Zlib headers 
# and .lib file are stored.
#
# If you don't have Zlib, comment this line out, so that ZLIB_DIR isn't
# defined.
#
# XXX - ZLIB must be recompiled on MSVC 2005 because of C runtime lib (msvcr)
# problems, simply disable it for now on MSVC 2005 (and other none 6 versions)
!IF "$(MSVC_VARIANT)" == "MSVC6"
ZLIB_DIR=$(WIRESHARK_LIBS)\zlib123-dll
!ENDIF

#
# Optional: The Net-SNMP library enables SNMP OID to name resolvings
# for the MIBs available.
#
# If you have Net-SNMP, set this to the pathname of the directory in
# which the Net-SNMP headers and .lib file are stored.
#
# If you don't have Net-SNMP, comment this line out, so that NET_SNMP_DIR
# isn't defined.
#
NET_SNMP_DIR=$(WIRESHARK_LIBS)\net-snmp-5.3.1

#
# Optional: the ADNS library enables asynchronous (nonblocking) DNS 
# name resolvings.
#
# If you have GNU ADNS, set this to the directory in which the GNU ADNS 
# .lib file is stored.
#
# If you don't have GNU ADNS, comment this line out, so that ADNS_DIR
# isn't defined.
#
ADNS_DIR=$(WIRESHARK_LIBS)\adns-1.0-win32-05

#
# Optional: the PCRE (Perl Compatible Regular Expressions) library 
# enables regular expressions for display filters.
#
# If you have the PCRE library, set this to the directory in which 
# the GNUWIN32 pcre-lib package is stored.
#
# If you don't have PCRE, comment this line out, so that PCRE_DIR
# isn't defined.
#
PCRE_DIR=$(WIRESHARK_LIBS)\pcre-6.4

#
# Optional: the GNUTLS library enables ssl decryption.
#
# If you have the GNUTLS library, set this to the directory where 
# the lib and include files are stored.
#
# If you don't have GNUTLS, comment this line out, so that GNUTLS_DIR
# isn't defined.
#
# XXX - GNUTLS headers doesn't compile on MSVC 2005
!IF "$(MSVC_VARIANT)" == "MSVC6"
GNUTLS_DIR=$(WIRESHARK_LIBS)\gnutls-1.6.0-1
!ENDIF

#
# Optional: the KFW library enables kerberos/sasl/dcerpc decryption.
#
# If you have the kerberos for windows (mit) library, set this to the 
# directory where the kfw package is stored.
#
# If you don't have KFW, comment this line out, so that KFW_DIR
# isn't defined.
#
KFW_DIR=$(WIRESHARK_LIBS)\kfw-2.5

#
# Optional: the Nettle library enables ??? decryption.
#
# If you have the Nettle encryption library, set this to the 
# directory in which the nettle package is stored.
#
# If you don't have Nettle, comment this line out, so that NETTLE_DIR
# isn't defined.
#
# NETTLE_DIR=$(WIRESHARK_LIBS)\nettle-1.10

#
# Optional: the LUA library enables scripting support.
#
# If you have the LUA library, set this to the directory in which 
# the LUA package is stored.
#
# If you don't have LUA, comment this line out, so that LUA_DIR
# isn't defined.
#
LUA_DIR=$(WIRESHARK_LIBS)\lua5.1

#
# Optional: the PORTAUDIO library enables audio output for RTP streams.
#
# If you have the PORTAUDIO library (used for rtp_player), set this to 
# the directory in which the PORTAUDIO library is stored.
#
# If you don't have PORTAUDIO, comment this line out, so that 
# PORTAUDIO_DIR isn't defined.
#
#PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v18_1
PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v19

#
# Version number of PortAudio
# 
#PORTAUDIO_VERSION=18
PORTAUDIO_VERSION=19

#
# Mandatory for GTK >= 2: Iconv
#
# Set ICONV_DIR to the directory in which the
# ICONV include files and library resides.
#
ICONV_DIR=$(WIRESHARK_LIBS)\libiconv-1.9.1.bin.woe32

#
# Mandatory for GTK >= 2: Gettext
#
# Set GETTEXT_DIR to the directory in which the
# GETTEXT include files and library resides.
#
#GETTEXT_DIR=$(WIRESHARK_LIBS)\gettext-runtime-0.13.1
GETTEXT_DIR=$(WIRESHARK_LIBS)\gettext-0.14.5

#
# Optional: AirPcap developer's pack to capture wireless network traffic 
# incl. 802.11 management frames.
#
# If you have the AirPcap developer's pack, set this to the directory 
# in which the AirPcap developer's pack resides.
#
# If you don't have the AirPcap developer's pack, comment this line out, 
# so that AIRPCAP_DIR isn't defined.
#
#AIRPCAP_DIR=$(WIRESHARK_LIBS)\AirPcap



##### Tools #####

# Set the following mandatory commands to find the tools.
# The easiest way is to use the corresponding packages from cygwin.

# Set up the path to the cygwin binaries
CYGWIN_PATH=c:\cygwin\bin

# command for a shell (cygwin's bash package recommended)
SH_PROG=bash

# bash versions after 3.1.6 need the 'igncr' shell option to be able to
#  process scripts in windows 'native format' (dos crlf format). 
# The following !IF results in the option being used only if it is available
#  since using it on bash version 3.1.6 (or earlier) is not required and
#  will cause an error message.
!if "$(SH_PROG)"=="bash" && [$(CYGWIN_PATH)\bash -c "set -o igncr" 2>nul: ] == 0
SH_FLAGS=-o igncr
!endif

SH=$(SH_PROG) $(SH_FLAGS)


# command for perl (cygwin's perl package recommended)
PERL=perl

# command for pod2man and pod2html 
# (part of the perl package, usually leave these unchanged)
POD2MAN=$(SH) pod2man
POD2HTML=$(SH) pod2html

# command for native windows python (recommended)
PYTHON="C:/python24/python.exe"
# add native python to the path (not needed if cygwin's python is used)
PATH=c:\python24;$(PATH)

# command for python (cygwin's python package, not recommended)
#PYTHON=env python

# command for lex/flexx (cygwin's flex recommended)
LEX=flex

# command for yacc/bison (cygwin's bison recommended)
YACC=bison

#
# Optional: To build the NSIS installer.
#
# If you have the NSIS package, set this to the NSIS executable.
#
# If you don't have NSIS, comment this line out, so that MAKENSIS
# isn't defined.
#
MAKENSIS="%ProgramFiles%/nsis/makensis.exe"

#
# Optional: To build the developers documentation with doxygen and dot.
# Currently experimental only.
#
# You will have to download and install:
# Doxygen from: www.doxygen.org
# Graphviz from: http://www.research.att.com/sw/tools/graphviz/
#
# If you have doxygen, set this to the doxygen executable.
#
# If you don't want the developers documentation (or don't have the tools),
# comment this line out, so that DOXYGEN isn't defined.
#
#DOXYGEN="%ProgramFiles%/doxygen/bin/doxygen.exe"

#
# Optional: To build compressed html help format .chm and use it as online help format.
# You will have to download and install the html help compiler from:
#
# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html
# /hwMicrosoftHTMLHelpDownloads.asp 
#
# Then point HHC_DIR to the html help dir (where hhc.exe resides).
#
# If you don't want the online help (or don't have the tools),
# comment this line out, so that HHC_DIR isn't defined.
#
#HHC_DIR="%ProgramFiles%/HTML Help Workshop/"



##### Flags, PATHs and Miscellaneous #####

# Compiler flags:
# /W3  warning level 3 (0 less - 4 most, 1 default)
# /Zi  create .pdb file for debugging
# /D_CRT_SECURE_NO_DEPRECATE don't warn for "insecure" calls, see MSDN "Security Enhancements in the CRT"
# /D_CRT_NONSTDC_NO_DEPRECATE don't warn for "Deprecated CRT Functions" as MSDN calls this
#
!IF "$(MSVC_VARIANT)" == "MSVC6"
LOCAL_CFLAGS=/Zi /W3
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005"
LOCAL_CFLAGS=/Zi /W3 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE
!ELSE
!ERROR MSVC_VARIANT unknown
!ENDIF

# Linker flags:
# /DEBUG  generate debug info
# /PROFILE generate map file(s) for profiling
# /DEFAULTLIB:xxx use xxx as the standard C library
# /NODEFAULTLIB:xxx don't use xxx as the standard C library
# 
!IF "$(MSVC_VARIANT)" == "MSVC6"
LOCAL_LDFLAGS=/DEBUG 
!ELSEIF "$(MSVC_VARIANT)" == "MSVC2005"
#LOCAL_LDFLAGS=/DEBUG /DEFAULTLIB:msvcrt /NODEFAULTLIB:libc /NODEFAULTLIB:libcmt
LOCAL_LDFLAGS=/DEBUG /DEFAULTLIB:msvcrt /NODEFAULTLIB:libc /NODEFAULTLIB:libcmt
!ELSE
!ERROR MSVC_VARIANT unknown
!ENDIF

WS_PLUGIN_LDFLAGS=/DEBUG /NOLOGO /INCREMENTAL:no /MACHINE:I386 


# Set PDB_FILE according to your VC++ version 
PDB_FILE=vc*.pdb

# 
# Optional: Use the User's Guide as the online help system
# (currently experimental).
#
# If you don't have the User's Guide, comment this line out, so that 
# ENABLE_WSUG isn't defined.
#
#ENABLE_WSUG=USE

#
# According to http://bugs.wireshark.org/bugzilla/show_bug.cgi?id=403
# XCOPY under Windows NT doesn't support the "/Y" flag.  This works
# around that bug.
# XXX - This apparently doesn't work for some versions of nmake:
# http://support.microsoft.com/default.aspx?scid=kb;en-us;86814
# It looks like we'll have to call "set copycmd=/y" before we run xcopy.
COPYCMD=/y

#
# If you don't want to build libwireshark.dll, you should comment out the
# following line. (Note: for plugin support this option must stay activated)
ENABLE_LIBWIRESHARK=USE

#
# install (debug) directory for Wireshark GTK1 version (relative to your source dir)
INSTALL1_DIR=wireshark-gtk1

#
# install (debug) directory for Wireshark GTK2 version (relative to your source dir)
INSTALL2_DIR=wireshark-gtk2



##############################################################################
#
# You should not have to change anything below this comment.
# If you do, it's a deficiency in the Makefile.nmake files;
# either tell wireshark-dev@wireshark.org about it, including
# details of why you had to change it, or fix config.nmake
# and any Makefile.nmake files that need to be changed, and
# send us the patches, along with details of why the change
# was necessary.
#
##############################################################################

!IFDEF ENABLE_LIBWIRESHARK
# Uncomment next line to link plugins with the import library of libwireshark.dll 
LINK_PLUGINS_WITH_LIBWIRESHARK=USE
!ENDIF

#
# The RC_VERSION should be comma-separated, not dot-separated, 
# as per Graham Bloice's message in
#
#	http://www.ethereal.com/lists/ethereal-dev/200303/msg00283.html
#
# "The RC_VERSION variable in config.nmake should be comma separated. 
# This allows the resources to be built correctly and the version
# number to be correctly displayed in the explorer properties dialog
# for the executables, and XP's tooltip, rather than 0.0.0.0."
#

VERSION=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_MICRO)$(VERSION_EXTRA)
RC_VERSION=$(VERSION_MAJOR),$(VERSION_MINOR),$(VERSION_MICRO)

WTAP_VERSION=$(WTAP_VERSION_MAJOR).$(WTAP_VERSION_MINOR).$(WTAP_VERSION_MICRO)
RC_WTAP_VERSION=$(WTAP_VERSION_MAJOR),$(WTAP_VERSION_MINOR),$(WTAP_VERSION_MICRO)


GLIB_CFLAGS=/I$(GLIB_DIR)\include\glib-$(GLIB_VERSION) \
	/I$(GLIB_DIR)\lib\glib-$(GLIB_VERSION)\include
GCC_GLIB_CFLAGS=-I$(GLIB_DIR)\include\glib-$(GLIB_VERSION) \
	-I$(GLIB_DIR)\lib\glib-$(GLIB_VERSION)\include
GLIB_LIBS=$(GLIB_DIR)\lib\glib-$(GLIB_VERSION).lib \
	$(GLIB_DIR)\lib\gmodule-$(GLIB_VERSION).lib \
	$(GLIB_DIR)\lib\gobject-$(GLIB_VERSION).lib

# GTK+ 1.3
GTK1_CFLAGS=$(GLIB_CFLAGS) /I$(GTK1_DIR)\include /I$(GTK1_DIR)\include\gdk \
	/I$(GTK1_DIR)\lib\gtk+\include
GTK1_LIBS=$(GTK1_DIR)\lib\gtk.lib \
	$(GTK1_DIR)\lib\gdk.lib \
	$(GLIB_LIBS)

# GTK+ 2.x
GTK2_CFLAGS=$(GLIB_CFLAGS) /I$(GTK2_DIR)\include\gtk-2.0 \
	/I$(GTK2_DIR)\lib\gtk-2.0\include \
	/I$(GTK2_DIR)\include\atk-1.0 \
	/I$(GTK2_DIR)\include\cairo \
	/I$(GTK2_DIR)\include\pango-1.0
GTK2_LIBS=$(GTK2_DIR)\lib\gtk-win32-2.0.lib \
	$(GTK2_DIR)\lib\gdk-win32-2.0.lib \
	$(GTK2_DIR)\lib\gdk_pixbuf-2.0.lib \
	$(GTK2_DIR)\lib\pango-1.0.lib \
	$(GLIB_LIBS)

!IF "$(GTK2_INST_VERSION)" == "2.10"
GTK2_LIB_DIR=2.10.0
NEED_LIBPNG_DLL=USE
NEED_CAIRO_DLL=USE
GTK_WIMP_DIR=DUMMY_TO_USE_WIMP
GTK_WIMP_DLLSRC_DIR=$(GTK2_DIR)\lib\gtk-2.0\2.10.0\engines
GTK_WIMP_DLLDST_DIR=lib\gtk-2.0\2.10.0\engines
GTK_WIMP_RCSRC_DIR=$(GTK2_DIR)\share\themes\MS-Windows\gtk-2.0
GTK_WIMP_RCDST_DIR=etc\gtk-2.0
!ELSEIF "$(GTK2_INST_VERSION)" == "2.8"
# the lib dir of GTK2.6 didn't changed since 2.4.0
GTK2_LIB_DIR=2.4.0
NEED_LIBPNG_DLL=USE
NEED_CAIRO_DLL=USE
GTK_WIMP_DIR=DUMMY_TO_USE_WIMP
GTK_WIMP_DLLSRC_DIR=$(GTK2_DIR)\lib\gtk-2.0\2.4.0\engines
GTK_WIMP_DLLDST_DIR=lib\gtk-2.0\2.4.0\engines
GTK_WIMP_RCSRC_DIR=$(GTK2_DIR)\share\themes\MS-Windows\gtk-2.0
GTK_WIMP_RCDST_DIR=etc\gtk-2.0
!ELSEIF "$(GTK2_INST_VERSION)" == "2.6"
GTK2_LIB_DIR=2.4.0
GTK_WIMP_DLLSRC_DIR=$(GTK_WIMP_DIR)
GTK_WIMP_DLLDST_DIR=lib\gtk-2.0\2.4.0\engines
GTK_WIMP_RCSRC_DIR=$(GTK_WIMP_DIR)\Theme\gtk-2.0
GTK_WIMP_RCDST_DIR=share\themes\Default\gtk-2.0
GTK_THEME_DIR=$(GTK_WIMP_DIR)\Theme\gtk-2.0
!ENDIF

# the lib dir of PANGO changed in 1.12
!IF "$(PANGO_INST_VERSION)" == "1.14"
PANGO_LIB_DIR=1.5.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.10"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.8"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.4"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.2"
PANGO_LIB_DIR=1.2.0
!ENDIF

!IFDEF AIRPCAP_DIR
AIRPCAP_CONFIG=^#define HAVE_AIRPCAP 1
AIRPDCAP_CONFIG=^#define HAVE_AIRPDCAP 1
!ELSE
AIRPCAP_CONFIG=
AIRPDCAP_CONFIG=
!ENDIF

!IFDEF PCAP_DIR
# Nmake uses carets to escape special characters
WINPCAP_CONFIG=^#define HAVE_LIBPCAP 1
!IF "$(WINPCAP_VERSION)" == "3.0" || "$(WINPCAP_VERSION)" == "3.1"
PCAP_FINDALLDEVS_CONFIG=^#define HAVE_PCAP_FINDALLDEVS 1
PCAP_DATALINK_NAME_TO_VAL_CONFIG=^#define HAVE_PCAP_DATALINK_NAME_TO_VAL 1
PCAP_DATALINK_VAL_TO_NAME_CONFIG=^#define HAVE_PCAP_DATALINK_VAL_TO_NAME 1
# PCAP_BREAKLOOP won't have any benefit on Win32, but breaks compatibility with 3.0
#!IF "$(WINPCAP_VERSION)" == "3.1"
#PCAP_BREAKLOOP_CONFIG=^#define HAVE_PCAP_BREAKLOOP 1
#!ELSE
PCAP_BREAKLOOP_CONFIG=
#!ENDIF
WPCAP_CONSTIFIED_CONFIG=^#define WPCAP_CONSTIFIED 1
!ELSE
PCAP_FINDALLDEVS_CONFIG=
PCAP_DATALINK_NAME_TO_VAL_CONFIG=
PCAP_DATALINK_VAL_TO_NAME_CONFIG=
PCAP_BREAKLOOP_CONFIG=
WPCAP_CONSTIFIED=
!ENDIF
!ELSE
WINPCAP_CONFIG=
PCAP_FINDALLDEVS_CONFIG=
PCAP_DATALINK_NAME_TO_VAL_CONFIG=
PCAP_DATALINK_VAL_TO_NAME_CONFIG=
PCAP_BREAKLOOP_CONFIG=
WPCAP_CONSTIFIED=
!ENDIF

!IFDEF ZLIB_DIR
ZLIB_PATH=$(ZLIB_DIR)
ZLIB_CFLAGS=/I$(ZLIB_DIR)\include
ZLIB_LIBS=$(ZLIB_DIR)\lib\zdll.lib
# Nmake uses carets to escape special characters
ZLIB_CONFIG=^#define HAVE_LIBZ 1
!else
ZLIB_CFLAGS=
ZLIB_LIBS=
ZLIB_CONFIG=
!ENDIF

!IFDEF NET_SNMP_DIR
NET_SNMP_CFLAGS=/I$(NET_SNMP_DIR)\include /I$(NET_SNMP_DIR)\win32
NET_SNMP_LIBS=$(NET_SNMP_DIR)\win32\lib\release\netsnmp.lib
# Nmake uses carets to escape special characters
NET_SNMP_CONFIG=^#define HAVE_NET_SNMP 1
!else
NET_SNMP_CFLAGS=
NET_SNMP_LIBS=
NET_SNMP_CONFIG=
!ENDIF

!IFDEF ADNS_DIR
ADNS_PATH=$(ADNS_DIR)\adns_win32\lib
ADNS_CFLAGS=/I$(ADNS_DIR)\src /I$(ADNS_DIR)\adns_win32
ADNS_LIBS=$(ADNS_DIR)\adns_win32\lib\adns_dll.lib
# Nmake uses carets to escape special characters
ADNS_CONFIG=^#define HAVE_GNU_ADNS 1
!else
ADNS_CFLAGS=
ADNS_LIBS=
ADNS_CONFIG=
!ENDIF

!IFDEF KFW_DIR
KFW_PATH=$(KFW_DIR)\bin
KFW_CFLAGS=/I$(KFW_DIR)\inc
KFW_LIBS=$(KFW_DIR)\lib\krb5_32.lib
# Nmake uses carets to escape special characters
KFW_CONFIG=^#define HAVE_MIT_KERBEROS 1
!else
KFW_CFLAGS=
KFW_LIBS=
KFW_CONFIG=
!ENDIF

!IFDEF PCRE_DIR
PCRE_PATH=$(PCRE_DIR)\bin
PCRE_CFLAGS=/I$(PCRE_DIR)\include
PCRE_LIBS=$(PCRE_DIR)\lib\pcre.lib
# Nmake uses carets to escape special characters
PCRE_CONFIG=^#define HAVE_LIBPCRE 1
!else
PCRE_CFLAGS=
PCRE_LIBS=
PCRE_CONFIG=
!ENDIF

!IFDEF NETTLE_DIR
NETTLE_CFLAGS=/I$(NETTLE_DIR)
NETTLE_LIBS=$(NETTLE_DIR)\libnettle.lib
# Nmake uses carets to escape special characters
NETTLE_CONFIG=^#define HAVE_LIBNETTLE 1
!else
NETTLE_CFLAGS=
NETTLE_LIBS=
NETTLE_CONFIG=
!ENDIF

!IFDEF GNUTLS_DIR
GNUTLS_PATH=$(GNUTLS_DIR)
GNUTLS_CFLAGS=/I$(GNUTLS_DIR)\include
GNUTLS_LIBS=\
	$(GNUTLS_DIR)\bin\libtasn1-3.lib	\
	$(GNUTLS_DIR)\bin\libgpg-error-0.lib	\
	$(GNUTLS_DIR)\bin\libgcrypt-11.lib	\
	$(GNUTLS_DIR)\bin\libgnutls-13.lib
# Nmake uses carets to escape special characters
GNUTLS_CONFIG=^#define HAVE_LIBGNUTLS 1
LIBGCRYPT_CONFIG=^#define HAVE_LIBGCRYPT 1
!else
GNUTLS_CFLAGS=
GNUTLS_LIBS=
GNUTLS_CONFIG=
LIBGCRYPT_CONFIG=
!ENDIF

!IFDEF LUA_DIR
LUA_CFLAGS=/I$(LUA_DIR)\include
LUA_LIBS=$(LUA_DIR)\lib\dll\lua5.1.lib
# Nmake uses carets to escape special characters
LUA_CONFIG=^#define HAVE_LUA 1
LUA_VERSION=^#define HAVE_LUA_5_1 1
!else
LUA_CFLAGS=
LUA_LIBS=
LUA_CONFIG=
!ENDIF

!IFDEF PORTAUDIO_DIR
# Nmake uses carets to escape special characters
PORTAUDIO_CONFIG=^#define HAVE_LIBPORTAUDIO 1
!IF "$(PORTAUDIO_VERSION)" == "18"
# V18 uses API version 1 and v19 API version 2
PORTAUDIO_CFLAGS=/I$(PORTAUDIO_DIR)\pa_common
PORTAUDIO_API_CONFIG=^#define PORTAUDIO_API_1 1
!ELSE
PORTAUDIO_CFLAGS=/I$(PORTAUDIO_DIR)\include /I$(PORTAUDIO_DIR)\src\common
!ENDIF

!else
PORTAUDIO_CFLAGS=
PORTAUDIO_CONFIG=
!ENDIF

!IFDEF HHC_DIR
HHC_CFLAGS=/I$(HHC_DIR)\include -DHHC_DIR
HHC_LIBS=$(HHC_DIR)\lib\htmlhelp.lib
!ELSE
HHC_CFLAGS=
HHC_LIBS=
!ENDIF

!IFDEF ENABLE_LIBWIRESHARK
LIBWIRESHARK_CONFIG=^#define HAVE_LIBWIRESHARKDLL 1
!ELSE
LIBWIRESHARK_CONFIG=
!ENDIF

!IFDEF ENABLE_WSUG
WSUG_CFLAGS=-DENABLE_WSUG
!ELSE
WSUG_CFLAGS=
!ENDIF

# Construct the path
PATH=$(PATH);$(CYGWIN_PATH);$(GLIB_DIR)\bin;$(GETTEXT_DIR)\bin;$(ICONV_DIR)\bin;$(ZLIB_PATH);$(ADNS_PATH)
