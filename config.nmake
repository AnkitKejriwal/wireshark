# $Id$

# Some more informations about the settings in this file, can be found 
# in the file README.win32 and the Developer's Guide (available online).



##### Versions #####

# The current Wireshark version
# It's highly recommended to leave MAJOR/MINOR/MICRO unchanged
VERSION_MAJOR=0
VERSION_MINOR=99
VERSION_MICRO=4
# It's recommended to change VERSION_EXTRA for your own custom builds
# e.g. "-SVN-12345"
VERSION_EXTRA=

# The version of the wiretap library (recommended: leave unchanged)
WTAP_VERSION_MAJOR=0
WTAP_VERSION_MINOR=3



##### Libraries #####

# 
# Base directory, where your libraries reside, which needs to be 
# compiling the sources. This setting is used only inside this file.
#
WIRESHARK_LIBS=C:\wireshark-win32-libs

#
# Mandatory: GLib settings
#
# Current versions of GTK+ 1.3 require GLib 2.0.  Earlier versions of
# GTK+ 1.3 are buggy; we don't recommend using them, and we don't
# support them.  Upgrade to at least GLib 2.0.
#
GLIB_VERSION=2.0
GLIB_DIR=$(WIRESHARK_LIBS)\glib

#
# Mandatory: GTK (& related) settings
#
# It's possible, to build both GTK version 1 and 2 at the same time,
# or only one of the versions. GTK version 2 is recommended.
# 
# If you want building with GTK+ 1.3, set GTK1_DIR to the pathname of the 
# "gtk+" directory; if you want building with GTK+ 2.x, set GTK2_DIR to 
# the pathname of the directory in which the "include" and "lib" directories 
# reside.
#
GTK1_DIR=$(WIRESHARK_LIBS)\gtk+
GTK2_DIR=$(WIRESHARK_LIBS)\gtk2

#
# Mandatory for GTK >= 2: Version numbers of gtk2 and pango.
#
# (MAJOR + MINOR Version number but without MICRO version number) 
# These macros are used by the nsis installer script and by the setup target.
#
#GTK2_INST_VERSION=2.2
#PANGO_INST_VERSION=1.2
#GTK2_INST_VERSION=2.4
#PANGO_INST_VERSION=1.4
# GTK 2.6 is the mainline since Ethereal 0.10.14
GTK2_INST_VERSION=2.6
PANGO_INST_VERSION=1.8
# Support for GTK 2.8 is currently experimental ...
#GTK2_INST_VERSION=2.8
#PANGO_INST_VERSION=1.10

#
# If you have GTK-Wimp, set this to the pathname of the directory in
# which the files are stored.
#
# If you don't have GTK-Wimp, comment this line out, so that GTK-Wimp isn't
# defined.
#
# Please note: GTK 2.8 (and later?) includes GTK-Wimp
# (in this case these GTK-Wimp related settings will have no effect)
#
GTK_WIMP_DIR=$(WIRESHARK_LIBS)\gtk-wimp\gtk-wimp-0.7.0-bin
GTK_THEME_DIR=$(GTK_WIMP_DIR)\Theme\gtk-2.0

#
# Optional: WinPcap developer's pack to capture network traffic.
#
# The WinPcap developer's pack version Wireshark is build with.
#
# If you're building with WinPcap 3.0, set WINPCAP_VERSION to 3.0;
# if you're building with WinPcap 3.1, set WINPCAP_VERSION to 3.1.
# XXX - what to set for 4.0 beta 1?
#
# If you don't have the WPdpack, comment this line out, so that 
# WINPCAP_VERSION isn't defined.
#
WINPCAP_VERSION=3.1
#
# If you have the WinPcap developer's pack, set this to the directory 
# in which the WinPcap developer's pack resides.
#
# If you don't have the WPdpack, comment this line out, so that 
# PCAP_DIR isn't defined.
#
PCAP_DIR=$(WIRESHARK_LIBS)\WPdpack

#
# Optional: The ZLib enables unzipping of gzip compressed capture files 
# "on the fly".
#
# If you have Zlib, set this to directory in which the Zlib headers 
# and .lib file are stored.
#
# If you don't have Zlib, comment this line out, so that ZLIB_DIR isn't
# defined.
#
ZLIB_DIR=$(WIRESHARK_LIBS)\zlib123-dll

#
# Optional: The Net-SNMP library enables SNMP OID to name resolvings
# for the MIBs available.
#
# If you have Net-SNMP, set this to the pathname of the directory in
# which the Net-SNMP headers and .lib file are stored.
#
# If you don't have Net-SNMP, comment this line out, so that NET_SNMP_DIR
# isn't defined.
#
NET_SNMP_DIR=$(WIRESHARK_LIBS)\net-snmp-5.3.1

#
# Optional: the ADNS library enables asynchronous (nonblocking) DNS 
# name resolvings.
#
# If you have GNU ADNS, set this to the directory in which the GNU ADNS 
# .lib file is stored.
#
# If you don't have GNU ADNS, comment this line out, so that ADNS_DIR
# isn't defined.
#
ADNS_DIR=$(WIRESHARK_LIBS)\adns-1.0-win32-05

#
# Optional: the PCRE (Perl Compatible Regular Expressions) library 
# enables regular expressions for display filters.
#
# If you have the PCRE library, set this to the directory in which 
# the GNUWIN32 pcre-lib package is stored.
#
# If you don't have PCRE, comment this line out, so that PCRE_DIR
# isn't defined.
#
PCRE_DIR=$(WIRESHARK_LIBS)\pcre-6.4

#
# Optional: the GNUTLS library enables ssl decryption.
#
# If you have the GNUTLS library, set this to the directory where 
# the lib and include files are stored.
#
# If you don't have GNUTLS, comment this line out, so that GNUTLS_DIR
# isn't defined.
#
GNUTLS_DIR=$(WIRESHARK_LIBS)\gnutls-1.5.0-1

#
# Optional: the KFW library enables kerberos/sasl/dcerpc decryption.
#
# If you have the kerberos for windows (mit) library, set this to the 
# directory where the kfw package is stored.
#
# If you don't have KFW, comment this line out, so that KFW_DIR
# isn't defined.
#
KFW_DIR=$(WIRESHARK_LIBS)\kfw-2.5

#
# Optional: the Nettle library enables ??? decryption.
#
# If you have the Nettle encryption library, set this to the 
# directory in which the nettle package is stored.
#
# If you don't have Nettle, comment this line out, so that NETTLE_DIR
# isn't defined.
#
# NETTLE_DIR=$(WIRESHARK_LIBS)\nettle-1.10

#
# Optional: the LUA library enables scripting support.
#
# If you have the LUA library, set this to the directory in which 
# the LUA package is stored.
#
# If you don't have LUA, comment this line out, so that LUA_DIR
# isn't defined.
#
LUA_DIR=$(WIRESHARK_LIBS)\lua5.1

#
# Optional: the PORTAUDIO library enables audio output for RTP streams.
#
# If you have the PORTAUDIO library (used for rtp_player), set this to 
# the directory in which the PORTAUDIO library is stored.
#
# If you don't have PORTAUDIO, comment this line out, so that 
# PORTAUDIO_DIR isn't defined.
#
# PORTAUDIO_DIR=$(WIRESHARK_LIBS)\portaudio_v18_1

# If the PORTAUDIO library is used this line must be uncommented if v18
# is used. V18 uses API version 1 and v19 API version 2
# 
# PORTAUDIO_API_CONFIG=^#define PORTAUDIO_API_1 1


#
# Mandatory for GTK >= 2: Iconv
#
# Set ICONV_DIR to the directory in which the
# ICONV include files and library resides.
#
ICONV_DIR=$(WIRESHARK_LIBS)\libiconv-1.9.1.bin.woe32

#
# Mandatory for GTK >= 2: Gettext
#
# Set GETTEXT_DIR to the directory in which the
# GETTEXT include files and library resides.
#
GETTEXT_DIR=$(WIRESHARK_LIBS)\gettext-runtime-0.13.1



##### Tools #####

# Set the following mandatory commands to find the tools.
# The easiest way is to use the corresponding packages from cygwin.

# command for a shell (cygwin's bash package recommended)
SH=bash

# command for perl (cygwin's perl package recommended)
PERL=perl

# command for pod2man and pod2html 
# (part of the perl package, usually leave these unchanged)
POD2MAN=$(SH) pod2man
POD2HTML=$(SH) pod2html

# command for python (cygwin's python package recommended)
PYTHON=env python

# command for native windows python (not recommended)
#PYTHON="C:/python24/python.exe"
# add native python to the path (not needed if cygwin's python is used)
#PATH=c:\python24;$(PATH)

# command for lex/flexx (cygwin's flex recommended)
LEX=flex

# command for yacc/bison (cygwin's bison recommended)
YACC=bison

#
# Optional: To build the NSIS installer.
#
# If you have the NSIS package, set this to the NSIS executable.
#
# If you don't have NSIS, comment this line out, so that MAKENSIS
# isn't defined.
#
MAKENSIS="C:/program files/nsis/makensis.exe"

#
# Optional: To build the developers documentation with doxygen and dot.
# Currently experimental only.
#
# You will have to download and install:
# Doxygen from: www.doxygen.org
# Graphviz from: http://www.research.att.com/sw/tools/graphviz/
#
# If you have doxygen, set this to the doxygen executable.
#
# If you don't want the developers documentation (or don't have the tools),
# comment this line out, so that DOXYGEN isn't defined.
#
#DOXYGEN="C:/program files/doxygen/bin/doxygen.exe"

#
# Optional: To build compressed html help format .chm and use it as online help format.
# You will have to download and install the html help compiler from:
#
# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html
# /hwMicrosoftHTMLHelpDownloads.asp 
#
# Then point HHC_DIR to the html help dir (where hhc.exe resides).
#
# If you don't want the online help (or don't have the tools),
# comment this line out, so that HHC_DIR isn't defined.
#
#HHC_DIR="C:/Program Files/HTML Help Workshop/"



##### Flags, PATHs and Miscellaneous #####

# Compiler flags
# /W3  warning level 3 (0 less - 4 most, 1 default)
# /Zi  create .pdb file for debugging
LOCAL_CFLAGS=/Zi /W3

# Linker flags
# /DEBUG  generate debug info
# /PROFILE generate map file(s) for profiling
LOCAL_LDFLAGS=/DEBUG

# Set PDB_FILE according to your VC++ version 
PDB_FILE=vc*.pdb

# Set up the path to the cygwin binaries
CYGWIN_PATH=c:\cygwin\bin

# 
# Optional: Directory, where your User's Guide reside, 
# relative to the source dir. (currently experimental)
#
# If you don't have the User's Guide, comment this line out, so that 
# WIRESHARK_EUG_DIR isn't defined.
#
#WIRESHARK_EUG_DIR=docbook/eug_html_chunked

#
# According to http://bugs.wireshark.org/bugzilla/show_bug.cgi?id=403
# XCOPY under Windows NT doesn't support the "/Y" flag.  This works
# around that bug.
# XXX - This apparently doesn't work for some versions of nmake:
# http://support.microsoft.com/default.aspx?scid=kb;en-us;86814
# It looks like we'll have to call "set copycmd=/y" before we run xcopy.
COPYCMD=/y

#
# If you don't want to build libwireshark.dll, you should comment out the
# following line. (Note: for plugin support this option must stay activated)
ENABLE_LIBWIRESHARK=USE



##############################################################################
#
# You should not have to change anything below this comment.
# If you do, it's a deficiency in the Makefile.nmake files;
# either tell wireshark-dev@wireshark.org about it, including
# details of why you had to change it, or fix config.nmake
# and any Makefile.nmake files that need to be changed, and
# send us the patches, along with details of why the change
# was necessary.
#
##############################################################################

!IFDEF ENABLE_LIBWIRESHARK
# Uncomment next line to link plugins with the import library of libwireshark.dll 
LINK_PLUGINS_WITH_LIBWIRESHARK=USE
!ENDIF

#
# The RC_VERSION should be comma-separated, not dot-separated, 
# as per Graham Bloice's message in
#
#	http://www.ethereal.com/lists/ethereal-dev/200303/msg00283.html
#
# "The RC_VERSION variable in config.nmake should be comma separated. 
# This allows the resources to be built correctly and the version
# number to be correctly displayed in the explorer properties dialog
# for the executables, and XP's tooltip, rather than 0.0.0.0."
#

VERSION=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_MICRO)$(VERSION_EXTRA)
RC_VERSION=$(VERSION_MAJOR),$(VERSION_MINOR),$(VERSION_MICRO)

WTAP_VERSION=$(WTAP_VERSION_MAJOR).$(WTAP_VERSION_MINOR)
RC_WTAP_VERSION=$(WTAP_VERSION_MAJOR),$(WTAP_VERSION_MINOR)


GLIB_CFLAGS=/I$(GLIB_DIR)\include\glib-$(GLIB_VERSION) \
	/I$(GLIB_DIR)\lib\glib-$(GLIB_VERSION)\include
GCC_GLIB_CFLAGS=-I$(GLIB_DIR)\include\glib-$(GLIB_VERSION) \
	-I$(GLIB_DIR)\lib\glib-$(GLIB_VERSION)\include
GLIB_LIBS=$(GLIB_DIR)\lib\glib-$(GLIB_VERSION).lib \
	$(GLIB_DIR)\lib\gmodule-$(GLIB_VERSION).lib \
	$(GLIB_DIR)\lib\gobject-$(GLIB_VERSION).lib

# GTK+ 1.3
GTK1_CFLAGS=$(GLIB_CFLAGS) /I$(GTK1_DIR)\include /I$(GTK1_DIR)\include\gdk \
	/I$(GTK1_DIR)\lib\gtk+\include
GTK1_LIBS=$(GTK1_DIR)\lib\gtk.lib \
	$(GTK1_DIR)\lib\gdk.lib \
	$(GLIB_LIBS)

# GTK+ 2.x
GTK2_CFLAGS=$(GLIB_CFLAGS) /I$(GTK2_DIR)\include\gtk-2.0 \
	/I$(GTK2_DIR)\lib\gtk-2.0\include \
	/I$(GTK2_DIR)\include\atk-1.0 \
	/I$(GTK2_DIR)\include\cairo \
	/I$(GTK2_DIR)\include\pango-1.0
GTK2_LIBS=$(GTK2_DIR)\lib\gtk-win32-2.0.lib \
	$(GTK2_DIR)\lib\gdk-win32-2.0.lib \
	$(GTK2_DIR)\lib\gdk_pixbuf-2.0.lib \
	$(GTK2_DIR)\lib\pango-1.0.lib \
	$(GLIB_LIBS)

# the lib dir of GTK2.6 didn't changed since 2.4.0
!IF "$(GTK2_INST_VERSION)" == "2.8"
GTK2_LIB_DIR=2.4.0
NEED_LIBPNG_DLL=USE
NEED_CAIRO_DLL=USE
GTK_WIMP_DIR=$(GTK2_DIR)\lib\gtk-2.0\$(GTK2_LIB_DIR)\engines
GTK_THEME_DIR=$(GTK2_DIR)\share\themes\MS-Windows\gtk-2.0
!ELSEIF "$(GTK2_INST_VERSION)" == "2.6"
GTK2_LIB_DIR=2.4.0
!ELSEIF "$(GTK2_INST_VERSION)" == "2.4"
GTK2_LIB_DIR=2.4.0
!ELSEIF "$(GTK2_INST_VERSION)" == "2.2"
GTK2_LIB_DIR=2.2.0
!ENDIF

# the lib dir of PANGO1.8 didn't changed since 1.4.0
!IF "$(PANGO_INST_VERSION)" == "1.10"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.8"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.4"
PANGO_LIB_DIR=1.4.0
!ELSEIF "$(PANGO_INST_VERSION)" == "1.2"
PANGO_LIB_DIR=1.2.0
!ENDIF

# Enable / disable AirPcap support

# AIRPCAP_CONFIG=^#define HAVE_AIRPCAP 1
AIRPCAP_CONFIG=

!IFDEF WINPCAP_VERSION
# Nmake uses carets to escape special characters
WINPCAP_CONFIG=^#define HAVE_LIBPCAP 1
!IF "$(WINPCAP_VERSION)" == "3.0" || "$(WINPCAP_VERSION)" == "3.1"
PCAP_FINDALLDEVS_CONFIG=^#define HAVE_PCAP_FINDALLDEVS 1
PCAP_DATALINK_NAME_TO_VAL_CONFIG=^#define HAVE_PCAP_DATALINK_NAME_TO_VAL 1
PCAP_DATALINK_VAL_TO_NAME_CONFIG=^#define HAVE_PCAP_DATALINK_VAL_TO_NAME 1
# PCAP_BREAKLOOP won't have any benefit on Win32, but breaks compatibility with 3.0
#!IF "$(WINPCAP_VERSION)" == "3.1"
#PCAP_BREAKLOOP_CONFIG=^#define HAVE_PCAP_BREAKLOOP 1
#!ELSE
PCAP_BREAKLOOP_CONFIG=
#!ENDIF
WPCAP_CONSTIFIED_CONFIG=^#define WPCAP_CONSTIFIED 1
!ELSE
PCAP_FINDALLDEVS_CONFIG=
PCAP_DATALINK_VAL_TO_NAME_CONFIG=
PCAP_BREAKLOOP_CONFIG=
WPCAP_CONSTIFIED=
!ENDIF
!ELSE
WINPCAP_CONFIG=
PCAP_FINDALLDEVS_CONFIG=
PCAP_DATALINK_NAME_TO_VAL_CONFIG=
PCAP_DATALINK_VAL_TO_NAME_CONFIG=
PCAP_BREAKLOOP_CONFIG=
WPCAP_CONSTIFIED=
!ENDIF

!IFDEF ZLIB_DIR
ZLIB_PATH=$(ZLIB_DIR)
ZLIB_CFLAGS=/I$(ZLIB_DIR)\include
ZLIB_LIBS=$(ZLIB_DIR)\lib\zdll.lib
# Nmake uses carets to escape special characters
ZLIB_CONFIG=^#define HAVE_LIBZ 1
!else
ZLIB_CFLAGS=
ZLIB_LIBS=
ZLIB_CONFIG=
!ENDIF

!IFDEF ADNS_DIR
ADNS_PATH=$(ADNS_DIR)\adns_win32\lib
ADNS_CFLAGS=/I$(ADNS_DIR)\src /I$(ADNS_DIR)\adns_win32
ADNS_LIBS=$(ADNS_DIR)\adns_win32\lib\adns_dll.lib
# Nmake uses carets to escape special characters
ADNS_CONFIG=^#define HAVE_GNU_ADNS 1
!else
ADNS_CFLAGS=
ADNS_LIBS=
ADNS_CONFIG=
!ENDIF

!IFDEF KFW_DIR
KFW_PATH=$(KFW_DIR)\bin
KFW_CFLAGS=/I$(KFW_DIR)\inc
KFW_LIBS=$(KFW_DIR)\lib\krb5_32.lib
# Nmake uses carets to escape special characters
KFW_CONFIG=^#define HAVE_MIT_KERBEROS 1
!else
KFW_CFLAGS=
KFW_LIBS=
KFW_CONFIG=
!ENDIF

!IFDEF PCRE_DIR
PCRE_PATH=$(PCRE_DIR)\bin
PCRE_CFLAGS=/I$(PCRE_DIR)\include
PCRE_LIBS=$(PCRE_DIR)\lib\pcre.lib
# Nmake uses carets to escape special characters
PCRE_CONFIG=^#define HAVE_LIBPCRE 1
!else
PCRE_CFLAGS=
PCRE_LIBS=
PCRE_CONFIG=
!ENDIF

!IFDEF NETTLE_DIR
NETTLE_CFLAGS=/I$(NETTLE_DIR)
NETTLE_LIBS=$(NETTLE_DIR)\libnettle.lib
# Nmake uses carets to escape special characters
NETTLE_CONFIG=^#define HAVE_LIBNETTLE 1
!else
NETTLE_CFLAGS=
NETTLE_LIBS=
NETTLE_CONFIG=
!ENDIF

!IFDEF ENABLE_LIBWIRESHARK
LIBWIRESHARK_CONFIG=^#define HAVE_LIBWIRESHARKDLL 1
!ELSE
LIBWIRESHARK_CONFIG=
!ENDIF

!IFDEF GNUTLS_DIR
GNUTLS_PATH=$(GNUTLS_DIR)
GNUTLS_CFLAGS=/I$(GNUTLS_DIR)\include
GNUTLS_LIBS=\
	$(GNUTLS_DIR)\bin\libtasn1-3.lib	\
	$(GNUTLS_DIR)\bin\libgpg-error-0.lib	\
	$(GNUTLS_DIR)\bin\libgcrypt-11.lib	\
	$(GNUTLS_DIR)\bin\libgnutls-14.lib
# Nmake uses carets to escape special characters
GNUTLS_CONFIG=^#define HAVE_LIBGNUTLS 1
LIBGCRYPT_CONFIG=^#define HAVE_LIBGCRYPT 1
!else
GNUTLS_CFLAGS=
GNUTLS_LIBS=
GNUTLS_CONFIG=
LIBGCRYPT_CONFIG=
!ENDIF

!IFDEF LUA_DIR
LUA_CFLAGS=/I$(LUA_DIR)\include
LUA_LIBS=$(LUA_DIR)\lib\vc6\lua5.1.lib
# Nmake uses carets to escape special characters
LUA_CONFIG=^#define HAVE_LUA 1
LUA_VERSION=^#define HAVE_LUA_5_1 1
!else
LUA_CFLAGS=
LUA_LIBS=
LUA_CONFIG=
!ENDIF

!IFDEF PORTAUDIO_DIR
# Nmake uses carets to escape special characters
PORTAUDIO_CONFIG=^#define HAVE_LIBPORTAUDIO 1
!else
PORTAUDIO_CONFIG=
!ENDIF

# Construct the path
PATH=$(PATH);$(CYGWIN_PATH);$(GLIB_DIR)\bin;$(GETTEXT_DIR)\bin;$(ICONV_DIR)\bin;$(ZLIB_PATH);$(ADNS_PATH)
