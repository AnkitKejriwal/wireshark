# ftp.thing
Action=Settings; Debug_PDU=9;
# at every packet mate will try match the PDUS in order
# if Proto exists for the current frame a mate's PDU will be created.
# for attributes to be imported from the tree they must be inside 
#    either in the span of the the Proto 
#    or in that of any of the protocols in the Transport stack
#
# The PDU's AVPL will contain all the remaining attributes
Action=PDU; Name=FTP; Proto=ftp; Transport=tcp/ip;  ftp_addr=ip.addr; tcp_port=tcp.port; addr=ftp.passive.ip; port=ftp.passive.port; ftp_cmd=ftp.request.command;
Action=PDU; Name=TCP; Proto=tcp; Transport=ip; addr=ip.addr; port=tcp.port; tcp_start=tcp.flags.syn; tcp_stop=tcp.flags.reset; tcp_stop=tcp.flags.fin;

# once all PDUs for a packet have being created
# they will be matched against their relative LegKeys 
# the attribute On specifies for which type of PDU the leg will be created
# the remaining of the AVPL will be used to create the key of the leg
# the matched attributes will become attributes of the leg
Action=LegKey; On=FTP; ftp_addr; ftp_addr; tcp_port; tcp_port;
Action=LegKey; On=TCP; addr; addr; port; port;

# LegExtra is used to copy into the leg any other attributes from the PDU
# that may be usefull later in the analysis
Action=LegExtra; On=FTP; addr; port;
Action=LegExtra; On=TCP; tcp_start; tcp_stop;


# Legs are created when a PDU that belongs to them matches the LegStart AVPL
Action=LegStart; On=FTP; ftp_cmd=USER;
Action=LegStart; On=TCP; tcp_start=1;

# and stopped when the PDU matches the LegStop AVPL
Action=LegStop; On=FTP; ftp_cmd=QUIT;
Action=LegStop; On=TCP; tcp_stop=1;

Action=SesKey; Name=ftp_session; On=FTP; ftp_addr; ftp_addr; ftp_port; ftp_port;
Action=SesKey; Name=ftp_session; On=TCP; addr; port;

Action=SesExtra; On=ftp_session; addr; port;
