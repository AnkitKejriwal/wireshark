Hi,

   I think this fifth rewrite has taken it out of prototype stage and makes it
look almost as "production" code, please tell me if it doesn't. I do not plan
to rewrite it again. I'm realy happy with what it has become.

This has surpassed my initial goal by far. It had just to to be a filter for
packets of calls, using few protocols, based on the calling number.

My original idea was just to rewrite inside ethereal a perl script I had
written to split calls. I needed to decode h225 and could not get Decode::ASN1
to compile the h225 syntax, I thought that migrating it into ethereal would
had been easy. I was *VERY* wrong. 

At the begining it was ECTAF it extracted data from ISUP and Q931. I hard
coded the extraction code directly in the dissectors and did an ugly job
putting it into several hashes but kida threaded the PDUs.

Later I wrote the AVP Lib for it. So that I would converge dealing with the
different protocols into a single mechanism. H225 got into the picture but
wasn't versatile enough. Still I used code in the dissectors to extract the
data.

As I tried to get MEGACO into the picture I wrote a parser to import the
dpc+cic->term mapping. It took me a day to "see the light", ECTAF used the
AVPLs as a logical engine already, I had a parser for AVPLs, 1+1=2, so:
importing the logic from a config file wasa natuiral step for it. STTF was
the name then (I never got it to be usable, that's why I did not release then). 

At that point I started working into fetching data from the tree, getting it
into avpls match the avpls to group the pdus etc... the nice "thing" was that
it was configurable. I called it TTT.

I released about a month ago something called "Thing" that was the result of
that metamorphosis. A configurable tool that allows to use ethereal to do
analysis at the session and application level. Not only on what the frames
carry but on how they interact. 

Now I release a nicelly wrapped version of it. I fixed many things and made
code that I believe to be versatile enough to be able to grow, clean enough to
be mantainable. 

Anyway today's MATE is just the core of an application in the application. It
has plenty of room to grow.

There are still things I will be doing on MATE's code in the very next future:

- add timers to gops so that if they expire before their stop condition the gop
   gets "marked".
  
- merge two gogs whenever a new gog matches keys of some previous unexpired gog

- spawn pre-started "empty" gops if a pdu of a gop in the gogs matches
  a given condition.

- use mem_chunks to store most of the strings in the AVP library
  * one for small strings (<16bytes)
  * one for midsized strings (<32 bytes)
  * one for large strings (<64 bytes)
  * g_malloc for the remaining cases
  
- the avpl transformations will be reimplemeted
  * a contextual_avp_op(AVPL_Transf* ctx, AVPL* src, AVP* avp, AVP* op)
    has to be written to allow to transform AVPs extracting its value from
	the source avpl and/or manupulating its contents.
  * a map method that uses a hash will replace the "extremely slow" long
    sequence of very similar matches that is used right now

- get rid of most of the dbg_print calls in the code and give sense to the
  debug levels, which by now are almost randomic.


There are things other I cannot/"do not plan to" do that would be nice
if someone else did:

- build it as a plugin on Win32. However it may be better to get it in epan and
  forget about pluginizing it.

- make it work with tethereal. This has frustrated me twice:
  first because I meant it to be used as a filter on live capture to save only
  packets of a call from a given number. And, second, because I tried very hard
  and failed miserably.
  
- GUI gizmos (I don't stand GUI programming, sorry) :
    an pane for sessions,
	a Graphical config tool
	?
	
- tap it, that is, we got plenty of information on how frames interact why
  don't we give the users the ability to do the math with it.

