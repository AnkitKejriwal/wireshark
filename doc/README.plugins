$Id$

1. Plugins

Writing a "plugin" dissector is not very different from writing a
standard one.  In fact all of the functions described in
README.developer can be used in the plugins exactly as the are used in
standard dissectors.

(Note, however, that not all OSes on which Ethereal runs can support
plugins.)

If you've chosen "xxx" as the name of your plugin (typically, that would
be a short name for your protocol, in all lower case), the following
instructions tell you how to implement it as a plugin.  All occurrences
of "xxx" below should be replaced by the name of your plugin.

2. The directory for the plugin, and its files

The plugin should be placed in a new plugins/xxx directory which should
contain minimally the following files:

AUTHORS
COPYING
ChangeLog
Makefile.am
Makefile.common
Makefile.nmake
moduleinfo.h
The source files and header files for your dissector

2.1 AUTHORS, COPYING, and ChangeLog

The AUTHORS, COPYING, and ChangeLog are the standard sort of GPL project 
files; see plugins/docsis for examples.

2.2 Makefile.am and Makefile.nmake

For your plugins/xxx/Makefile.am and plugins/xxx/Makefile.nmake files,
see the corresponding files in plugins/docsis.  Replace all occurrences
of "docsis" in those files with "xxx".

2.3 Makefile.common

Your plugins/xxx/Makefile.common should list the source files for your
dissector, in the DISSECTOR_SRC variable, and the header files for your
dissector, if any, in the DISSECTOR_INCLUDES variable.  (The
DISSECTOR_INCLUDES variable should not include moduleinfo.h.)

2.4 moduleinfo.h

Your plugins/xxx/moduleinfo.h file is used to set the version
information for the plugin.  An example follows:

/* Included *after* config.h, in order to re-define these macros */

#ifdef PACKAGE
#undef PACKAGE
#endif

/* Name of package */
#define PACKAGE "xxx"

#ifdef VERSION
#undef VERSION
#endif

/* Version number of package */
#define VERSION "0.0.8"

3. Changes to existing Ethereal files

You will also need to change the plugins/Makefile.am toplevel
Makefile.am, the plugins/Makefile.nmake toplevel Makefile.nmake, the
toplevel Makefile.am file, and the toplevel configure.in file.

3.1  Changes to plugins/Makefile.am

The plugins directory contains a Makefile.am.
You need to change the SUBDIRS directive to reflect the addition of 
your plugin:

SUBDIRS = \
	gryphon \
	mgcp \
	xxx


3.2 Changes to plugins/Makefile.nmake

To the Makefile.nmake you need to add your plugin to the all: rule

all: \
	gryphon \
	mgcp \
	xxx

then add a rule for your plugin:

xxx::
	cd xxx
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake
	cd ..

and finally add to the clean rule support for cleaning up after your 
plugin:

clean:
	cd gryphon
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake clean
	cd ../mgcp
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake clean	
	cd ..
	cd xxx
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake clean
	cd ..


distclean: clean
	cd gryphon
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake distclean
	cd ../mgcp
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake distclean	
	cd ..
	cd xxx
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake distclean
	cd ..


maintainer-clean: clean
	cd gryphon
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake maintainer-clean
	cd ../mgcp
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake maintainer-clean	
	cd ..
	cd xxx
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake maintainer-clean
	cd ..


3.3 Changes to the top level Makefile.am

Unfortunately there are quite some several places in the top level
Makefile.am that need to be altered for adding a plugin.

Add your plugin to the plugin_libs and plugin_ldadd (two times):

plugin_libs = \
        plugins/gryphon/gryphon.la \
        plugins/mgcp/mgcp.la    \
        plugins/xxx/xxx.la

if ENABLE_STATIC
plugin_ldadd = \
        plugins/gryphon/gryphon.o \
        plugins/mgcp/mgcp.o \
        plugins/xxx/xxx.o 

else          # ENABLE_STATIC
plugin_ldadd = \
        "-dlopen" self  \
        "-dlopen" plugins/gryphon/gryphon.la \
        "-dlopen" plugins/mgcp/mgcp.la \
        "-dlopen" plugins/xxx/xxx.la 

3.4  Changes to top level configure.in

You need to add your plugins Makefile to the AC_OUTPUT rule in the 
configure.in

AC_OUTPUT(
  Makefile
  doc/Makefile
  gtk/Makefile
  packaging/Makefile
  packaging/nsis/Makefile
  packaging/rpm/Makefile
  packaging/rpm/ethereal.spec
  packaging/svr4/Makefile
  packaging/svr4/checkinstall
  packaging/svr4/pkginfo
  plugins/Makefile
  plugins/gryphon/Makefile
  plugins/mgcp/Makefile
  plugins/xxx/Makefile
  tools/Makefile
  tools/lemon/Makefile
  ,)


4. Development and plugins

Plugins make some aspects of development easier and some harder.

The good news is that if you are working on a single plugin 
then you will find recompiling the plugin MUCH faster than 
recompiling a dissector and then linking it back into ethereal.

The bad news is that wireshark will not use the plugin unless the 
plugin is installed in one of the places it expects to look.

One way to deal with this problem is to set up a working root for 
ethereal, say in $HOME/build/root and build ethereal to install
there

./configure --prefix=${HOME}/build/root;make install

then subsequent rebuilds/installs of your plugin can be accomplished 
by going to the plugins/xxx directory and running 

make install

5. How to update an "old style" plugin (using plugin_init function)

The plugin registering has changed between 0.10.9 and 0.10.10; everyone
is encouraged to update their plugins as outlined below:

    o Remove following include statements from all plugin sources:

	#include "plugins/plugin_api.h"
	#include "plugins/plugin_api_defs.h"

    o Remove the init function.

    o Add a new Makefile.common file with the lists of source files and
      headers.

    o Change the Makefile.am and Makefile.nmake files to match those of
      the DOCSIS plugin.

----------------

Ed Warnicke <hagbard@physics.rutgers.edu>
Guy Harris <guy@alum.mit.edu>

Derived and expanded from the plugin section of README.developers
which was originally written by

James Coe <jammer@cin.net>
Gilbert Ramirez <gram@alumni.rice.edu>
Jeff Foster <jfoste@woodward.com>
Olivier Abad <oabad@cybercable.fr>
Laurent Deniel <laurent.deniel@free.fr>
