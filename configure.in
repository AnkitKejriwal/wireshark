# $Id: configure.in,v 1.250 2004/03/04 06:28:42 guy Exp $
#
AC_INIT(etypes.h)

AC_PREREQ(2.52)

dnl Check for CPU / vendor / OS
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(ethereal, 0.10.2)

AM_DISABLE_STATIC

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
dnl Work around libtool bug (fixed in the version 1.5a?)
AC_DEFUN([AC_PROVIDE_AC_LIBTOOL_DLOPEN], )
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_PROG_YACC
AM_PROG_LEX
AC_PATH_PROG(PERL, perl)
AC_PATH_PROG(POD2MAN, pod2man)
if test "x$POD2MAN" = x
then
	#
	# The alternative is not to build the man pages....
	#
	AC_MSG_ERROR(I couldn't find pod2man; make sure it's installed and in your path)
fi
AC_PATH_PROG(LEX, flex)
AC_PATH_PROG(PYTHON, python)

AC_SUBST(PERL)
AC_SUBST(LEX)
AC_SUBST(PYTHON)

# Check for packaging utilities
# For now, we check to see if the various packaging utilites are in our
# path.  I'm too lazy to write code to go hunt for them.  -  Gerald
AC_CHECK_PROG(HAVE_PKGPROTO, pkgproto, "yes", "no")
AC_CHECK_PROG(HAVE_PKGMK, pkgmk, "yes", "no")
AC_CHECK_PROG(HAVE_PKGTRANS, pkgtrans, "yes", "no")

if test x$HAVE_PKGPROTO = xyes -a x$HAVE_PKGMK = xyes \
     -a x$HAVE_PKGTRANS = xyes ; then
  HAVE_SVR4_PACKAGING=yes
else
  HAVE_SVR4_PACKAGING=no
fi
AC_SUBST(HAVE_SVR4_PACKAGING)

AC_ETHEREAL_RPM_CHECK
AC_SUBST(HAVE_RPM)

#
# If we're running gcc, add '-Wall -W' to CFLAGS, and add
# '-D_U_="__attribute__((unused))"' as well, so we can use _U_ to
# flag unused function arguments and not get warnings about them.
# If "--with-extra-gcc-checks" was specified, add "-Wcast-qual
# -Wcast-align" as well.  (Add more checks here in the future?)
#
# Otherwise, add '-D_U_=""', so that _U_ used to flag an unused function
# argument will compile with non-GCC compilers.
#
AC_ARG_WITH(extra-gcc-checks,
[  --with-extra-gcc-checks do additional -W checks in GCC.  [default=no]],
[
	if test $withval != no
	then
		ethereal_extra_gcc_flags=" -Wcast-qual -Wcast-align -Wbad-function-cast -pedantic -Wstrict-prototypes"
	fi
],)
AC_MSG_CHECKING(to see if we can add '-Wall -W$ethereal_extra_gcc_flags' to CFLAGS)
if test x$GCC != x ; then
  CFLAGS="-D_U_=\"__attribute__((unused))\" -Wall -W$ethereal_extra_gcc_flags $CFLAGS"
  AC_MSG_RESULT(yes)
else
  CFLAGS="-D_U_=\"\" $CFLAGS"
  AC_MSG_RESULT(no)
fi

#
# Add any platform-specific compiler flags needed.
#
AC_MSG_CHECKING(for platform-specific compiler flags)
if test "x$GCC" = x
then
	#
	# Not GCC - assume it's the vendor's compiler.
	#
	case "$host_os" in
	hpux*)
		#
		# HP's ANSI C compiler; flags suggested by Jost Martin.
		# "-Ae" for ANSI C plus extensions such as "long long".
		# "+O2", for optimization.  XXX - works with "-g"?
		#
		CFLAGS="-Ae +O2 $CFLAGS"
		AC_MSG_RESULT(HP ANSI C compiler - added -Ae +O2)
		;;
	darwin*)
		#
		# It may be called "cc", but it's really a GCC derivative
		# with a problematic special precompiler and precompiled
		# headers; turn off the special precompiler, as some
		# apparently-legal code won't compile with its precompiled
		# headers.
		#
		CFLAGS="-no-cpp-precomp $CFLAGS"
		AC_MSG_RESULT(Apple GCC - added -no-cpp-precomp)
		;;
	*)
		AC_MSG_RESULT(none needed)
		;;
	esac
else
	case "$host_os" in
	solaris*)
		# the X11 headers don't automatically include prototype info
		# and a lot don't include the return type
		CFLAGS="$CFLAGS -Wno-return-type -DFUNCPROTO=15"
		AC_MSG_RESULT(GCC on Solaris - added -Wno-return-type -DFUNCPROTO=15)
		;;
	darwin*)
		#
		# See comments above about Apple's lovely C compiler.
		#
		CFLAGS="-no-cpp-precomp $CFLAGS"
		AC_MSG_RESULT(Apple GCC - added -no-cpp-precomp)
		;;
	*)
		AC_MSG_RESULT(none needed)
		;;
	esac
fi

dnl Look in /usr/local for header files and libraries ?
dnl XXX FIXME don't include /usr/local if it is already in the system
dnl search path as this causes gcc 3.2 on Linux to complain about a change
dnl of the system search order for includes
AC_ARG_ENABLE(usr-local,
[  --enable-usr-local      look for headers and libs in /usr/local tree.  [default=yes]],enable_usr_local=$enableval,enable_usr_local=yes)

AC_MSG_CHECKING(whether to use /usr/local for headers and libraries)
if test "x$enable_usr_local" = "xyes" ; then
	AC_MSG_RESULT(yes)
	#
	# Arrange that we search for header files in the source directory
	# and in its "wiretap" subdirectory, as well as in "/usr/local/include",
	# as various packages we use ("libpcap", "zlib", an SNMP library)
	# may have been installed under "/usr/local/include".
	#
	CFLAGS="$CFLAGS -I/usr/local/include"
	CPPFLAGS="$CPPFLAGS -I/usr/local/include"

	#
	# Arrange that we search for libraries in "/usr/local/lib".
	#
	AC_ETHEREAL_ADD_DASH_L(LDFLAGS, /usr/local/lib)
else
	AC_MSG_RESULT(no)
fi

#
# If we're running Solaris, and LD_LIBRARY_PATH is defined, add it as a
# link directory.
#
case "$host_os" in
  solaris*)
    AC_MSG_CHECKING(for LD_LIBRARY_PATH, since you appear to be running Solaris)
    if test x$LD_LIBRARY_PATH != x ; then
      LIBS="$LIBS -R$LD_LIBRARY_PATH"
      AC_MSG_RESULT(yes -- added LD_LIBRARY_PATH to run-time linker path)
    else
      AC_MSG_RESULT(no -- this may be a problem in a few seconds)
    fi
  ;;
esac

#
# Check for versions of "sed" inadequate to handle, in libtool, a list
# of object files as large as the list in Ethereal.
#
# On Solaris, we check for "/bin/sed", "/usr/bin/sed", and "/usr/ucb/sed",
# as both "/usr/bin/sed" (which is also "/bin/sed", as "/bin" is just a
# symlink to "/usr/bin", but people may have "/bin" before "/usr/bin" in
# their search path) and "/usr/ucb/sed" are inadequate; "/usr/xpg4/bin/sed"
# is the only "sed" that comes with Solaris that can handle Ethereal.
#
# Add any checks here that are necessary for other OSes.
#
AC_ETHEREAL_GNU_SED_CHECK
if test "$HAVE_GNU_SED" = no ; then
	case "$host_os" in
	solaris*)
		AC_MSG_CHECKING(whether one of /usr/bin/sed or /bin/sed or /usr/ucb/sed will be used)
		case `which sed` in
			/bin/sed|/usr/bin/sed|/usr/ucb/sed)
			AC_MSG_RESULT(yes)		
			AC_MSG_ERROR([change your path to search /usr/xpg4/bin or directory containing GNU sed before /usr/bin (and /bin and /usr/ucb)])
			;;

			*)
			AC_MSG_RESULT(no)
			;;
		esac
		;;

	*)
		:
		;;
	esac
fi

# Enable/disable tethereal

AC_ARG_ENABLE(ethereal,
[  --enable-ethereal       build GTK+-based ethereal.  [default=yes]],enable_ethereal=$enableval,enable_ethereal=yes)

AC_ARG_ENABLE(gtk2,
[  --enable-gtk2           build Glib2/Gtk2+-based (t)ethereal.  [default=no]],enable_gtk2=$enableval,enable_gtk2=no)
AM_CONDITIONAL(USE_GTK2, test x$enable_gtk2 = xyes)

AC_ARG_ENABLE(threads,
[  --enable-threads        use threads in ethereal.  [default=no]],enable_threads=$enableval,enable_threads=no)
AM_CONDITIONAL(USE_THREADS, test x$enable_threads = xyes)

AC_ARG_ENABLE(profile-build,
[  --enable-profile-build  build profile-ready binaries.  [default=no]],enable_profile_build=$enableval,enable_profile_build=no)
AM_CONDITIONAL(USE_PROFILE_BUILD, test x$enable_profile_build = xyes)
AC_MSG_CHECKING(if profile builds must be generated)
if test "x$enable_profile_build" = "xyes" ; then
	if test -n "$GCC" ; then
		AC_MSG_RESULT(yes)
		CFLAGS=" -pg $CFLAGS"
	else
		AC_MSG_RESULT(no)
		echo "Building profile binaries currently only supported for GCC."
	fi
else
	AC_MSG_RESULT(no)
fi
	
# GTK checks
# We don't add $GLIB_LIBS to LIBS, because we don't want to force all
# programs to be built with GTK+.
#
if test "x$enable_gtk2" = "xyes" -a "x$enable_ethereal" = "xyes" ; then
	GTK_OK=two
	AM_PATH_GTK_2_0(2.0.0, CFLAGS="$CFLAGS $GTK_CFLAGS", GTK_OK=no, gthread)
elif test "x$enable_gtk2" != "xyes" -a "x$enable_ethereal" = "xyes" ; then
	GTK_OK=one
	AM_PATH_GTK(1.2.0, CFLAGS="$CFLAGS $GTK_CFLAGS", GTK_OK=no )
else
	GTK_OK=no
fi

# GLib checks
# This doesn't add GLIB_CFLAGS to CFLAGS, because AM_PATH_GTK will add
# GTK_CFLAGS to CFLAGS, and GTK_CFLAGS is a superset of CFLAGS.
# However, this means that both @GLIB_LIBS@ and @GTK_LIBS@ will be
# set when generating the Makefile, so we can make programs that require
# only GLib link with @GLIB_LIBS@ and make programs that require GTK+
# link with @GTK_LIBS@ (which includes @GLIB_LIBS@).
# We don't add $GLIB_LIBS to LIBS, because we don't want to force all
# programs to be built with GLib.
#
if test "$GTK_OK" = "no" ; then
	enable_ethereal="no"
	ethereal_bin=""
	ethereal_man=""
	# Honor GLIB_CFLAGS
	if test "x$enable_gtk2" = "xyes" ; then
		AM_PATH_GLIB_2_0(2.0.0, CFLAGS="$CFLAGS $GLIB_CFLAGS", AC_MSG_ERROR(GLib distribution not found.), gmodule)
	else
		AM_PATH_GLIB(1.2.0, CFLAGS="$CFLAGS $GLIB_CFLAGS", AC_MSG_ERROR(GLib distribution not found.), gmodule)
	fi
else
	ethereal_bin="ethereal\$(EXEEXT)"
	ethereal_man="ethereal.1"
        ethereal_SUBDIRS="gtk"
	# Honor GLIB_CFLAGS
	if test "$GTK_OK" = "two" ; then
		AM_PATH_GLIB_2_0(2.0.0, , AC_MSG_ERROR(GLib distribution not found.), gmodule)
	else
		AM_PATH_GLIB(1.2.0, , AC_MSG_ERROR(GLib distribution not found.), gmodule)
	fi
fi

#
# Check whether GLib modules are supported, to determine whether we
# can support plugins.
#
AC_MSG_CHECKING(whether GLib supports loadable modules)
ac_save_CFLAGS="$CFLAGS"
ac_save_LIBS="$LIBS"
CFLAGS="$CFLAGS $GLIB_CFLAGS"
LIBS="$GLIB_LIBS $LIBS"
AC_TRY_RUN([
#include <glib.h>
#include <gmodule.h>
#include <stdio.h>
#include <stdlib.h>

int 
main ()
{
  if (g_module_supported())
    return 0;	/* success */
  else
    return 1;	/* failure */
}
], ac_cv_glib_supports_modules=yes, ac_cv_glib_supports_modules=no,
   [echo $ac_n "cross compiling; assumed OK... $ac_c"])
CFLAGS="$ac_save_CFLAGS"
LIBS="$ac_save_LIBS"
if test "$ac_cv_glib_supports_modules" = yes ; then
  AC_MSG_RESULT(yes)
  have_plugins=yes
else
  AC_MSG_RESULT(no)
  have_plugins=no
fi


AC_SUBST(ethereal_bin)
AC_SUBST(ethereal_man)

rdps_bin="rdps\$(EXEEXT)"
AC_SUBST(rdps_bin)


# Enable/disable tethereal

AC_ARG_ENABLE(tethereal,
[  --enable-tethereal      build tethereal.  [default=yes]],tethereal=$enableval,enable_tethereal=yes)

if test "x$enable_tethereal" = "xyes" ; then
	tethereal_bin="tethereal\$(EXEEXT)"
	tethereal_man="tethereal.1"
	etherealfilter_man="ethereal-filter.4"
else
	tethereal_bin=""
	tethereal_man=""
fi
AC_SUBST(tethereal_bin)
AC_SUBST(tethereal_man)
AC_SUBST(etherealfilter_man)



# Enable/disable editcap

AC_ARG_ENABLE(editcap,
[  --enable-editcap        build editcap.  [default=yes]],enable_editcap=$enableval,enable_editcap=yes)

if test "x$enable_editcap" = "xyes" ; then
	editcap_bin="editcap\$(EXEEXT)"
	editcap_man="editcap.1"
else
	editcap_bin=""
	editcap_man=""
fi
AC_SUBST(editcap_bin)
AC_SUBST(editcap_man)


# Enable/disable mergecap

AC_ARG_ENABLE(mergecap,
[  --enable-mergecap       build mergecap.  [default=yes]],enable_mergecap=$enableval,enable_mergecap=yes)

if test "x$enable_mergecap" = "xyes" ; then
	mergecap_bin="mergecap\$(EXEEXT)"
	mergecap_man="mergecap.1"
else
	mergecap_bin=""
	mergecap_man=""
fi
AC_SUBST(mergecap_bin)
AC_SUBST(mergecap_man)


# Enable/disable text2pcap

AC_ARG_ENABLE(text2pcap,
[  --enable-text2pcap      build text2pcap.  [default=yes]],text2pcap=$enableval,enable_text2pcap=yes)

if test "x$enable_text2pcap" = "xyes" ; then
	text2pcap_bin="text2pcap\$(EXEEXT)"
	text2pcap_man="text2pcap.1"
else
	text2pcap_bin=""
	text2pcap_man=""
fi
AC_SUBST(text2pcap_bin)
AC_SUBST(text2pcap_man)

# Enable/disable idl2eth

AC_ARG_ENABLE(idl2eth,
[  --enable-idl2eth        build idl2eth.  [default=yes]],enable_idl2eth=$enableval,enable_idl2eth=yes)

if test "x$enable_idl2eth" = "xyes" ; then
	idl2eth_bin="idl2eth"
	idl2eth_man="idl2eth.1"
else
	idl2eth_bin=""
	idl2eth_man=""
fi
AC_SUBST(idl2eth_bin)
AC_SUBST(idl2eth_man)


# Enable/disable dftest

AC_ARG_ENABLE(dftest,
[  --enable-dftest         build dftest.  [default=no]],enable_dftest=$enableval,enable_dftest=no)

if test "x$enable_dftest" = "xyes" ; then
	dftest_bin="dftest\$(EXEEXT)"
else
	dftest_bin=""
fi
AC_SUBST(dftest_bin)


# Enable/disable randpkt

AC_ARG_ENABLE(randpkt,
[  --enable-randpkt        build randpkt.  [default=no]],enable_randpkt=$enableval,enable_randpkt=no)

if test "x$enable_randpkt" = "xyes" ; then
	randpkt_bin="randpkt\$(EXEEXT)"
else
	randpkt_bin=""
fi
AC_SUBST(randpkt_bin)


dnl Checks for "gethostbyname()" - and "-lnsl", if we need it to get
dnl "gethostbyname()".
AC_ETHEREAL_GETHOSTBY_LIB_CHECK

dnl Checks for "connect()", used as a proxy for "socket()" - and
dnl "-lsocket", if we need it to get "connect()".
AC_ETHEREAL_SOCKET_LIB_CHECK

dnl pcap check
AC_MSG_CHECKING(whether to use libpcap for packet capture)

AC_ARG_WITH(pcap,
changequote(<<, >>)dnl
<<  --with-pcap[=DIR]       use libpcap for packet capturing.  [default=yes]>>,
changequote([, ])dnl
[
	if test $withval = no
	then
		want_pcap=no
	elif test $withval = yes
	then
		want_pcap=yes
	else
		want_pcap=yes
		pcap_dir=$withval
	fi
],[
	want_pcap=yes
	pcap_dir=
])
if test "x$want_pcap" = "xno" ; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	AC_ETHEREAL_PCAP_CHECK
fi

dnl zlib check
AC_MSG_CHECKING(whether to use zlib for reading compressed capture files)

AC_ARG_WITH(zlib,
changequote(<<, >>)dnl
<<  --with-zlib[=DIR]       use zlib (located in directory DIR, if supplied) to read compressed data.  [default=yes, if present]>>,
changequote([, ])dnl
[
	if test $withval = no
	then
		want_zlib=no
	elif test $withval = yes
	then
		want_zlib=yes
	else
		want_zlib=yes
		zlib_dir=$withval
	fi
],[
	#
	# Use zlib if it's present, otherwise don't.
	#
	want_zlib=ifpresent
	zlib_dir=
])
if test "x$want_zlib" = "xno" ; then
        AC_MSG_RESULT(no)
else
        AC_MSG_RESULT(yes)
        AC_ETHEREAL_ZLIB_CHECK
	if test "x$want_zlib" = "xno" ; then
		AC_MSG_RESULT(zlib not found - disabling compressed capture file support)
	fi
fi


dnl pcre check
AC_MSG_CHECKING(whether to use libpcre for regular expressions in dfilters)

AC_ARG_WITH(pcre,
changequote(<<, >>)dnl
<<  --with-pcre[=DIR]       use libpcre (located in directory DIR, if supplied) to use in dfilter regular expressions.  [default=yes, if present]>>,
changequote([, ])dnl
[
	if test $withval = no
	then
		want_pcre=no
	elif test $withval = yes
	then
		want_pcre=yes
	else
		want_pcre=yes
		pcre_dir=$withval
	fi
],[
	#
	# Use libpcre if it's present, otherwise don't.
	#
	want_pcre=ifpresent
	pcre_dir=
])
if test "x$want_pcre" = "xno" ; then
        AC_MSG_RESULT(no)
else
        AC_MSG_RESULT(yes)
        AC_ETHEREAL_LIBPCRE_CHECK
	if test "x$want_pcre" = "xno" ; then
		AC_MSG_RESULT(libpcre not found - disabling support for perl compatible regular expressions in dfilters)
	fi
fi


dnl ipv6 check
AC_ARG_ENABLE(ipv6,
[  --enable-ipv6           use ipv6 name resolution, if available.  [default=yes]],enable_ipv6=$enableval,enable_ipv6=yes)

AC_MSG_CHECKING(whether to enable ipv6 name resolution if available)
if test "x$enable_ipv6" = "xno" ; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	AC_ETHEREAL_IPV6_STACK
fi


dnl Check if ethereal should be installed setuid
AC_ARG_ENABLE(setuid-install,
[  --enable-setuid-install install ethereal as setuid. DANGEROUS!!! [default=no]],enable_setuid_install=$enableval,enable_setuid_install=no)

AC_MSG_CHECKING(whether to install ethereal setuid)
if test "x$enable_setuid_install" = "xno" ; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
fi

AM_CONDITIONAL(SETUID_INSTALL, test x$enable_setuid_install = xyes)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h stdarg.h netdb.h)
AC_CHECK_HEADERS(sys/stat.h sys/sockio.h sys/types.h sys/socket.h)
AC_CHECK_HEADERS(sys/utsname.h sys/wait.h)
AC_CHECK_HEADERS(netinet/in.h)
AC_CHECK_HEADERS(stddef.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(iconv.h)

dnl SSL Check
SSL_LIBS=''
AC_MSG_CHECKING(whether to use SSL library if available)
if test "x$enable_ssl" = "xno" ; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	AC_ETHEREAL_SSL_CHECK
fi
AC_SUBST(SSL_LIBS)

dnl UCD SNMP/NET-SNMP Check
SNMP_LIBS=''

AC_ARG_WITH(net-snmp,
changequote(<<, >>)dnl
<<  --with-net-snmp=PATH    use NET-SNMP library, with PATH as the location of the net-snmp-config shell script that comes with the net-snmp package.>>,
changequote([, ])dnl
[netsnmpconfig=$withval]
)

AC_ARG_WITH(ucd-snmp,
changequote(<<, >>)dnl
<<  --with-ucd-snmp[=DIR]   use UCD SNMP client library (located in directory DIR, if supplied).  [default=yes, if present]>>,
changequote([, ])dnl
[
	if test $withval = no
	then
		want_ucdsnmp=no
	elif test $withval = yes
	then
		want_ucdsnmp=yes
	else
		want_ucdsnmp=yes
		ucdsnmp_dir=$withval
	fi
],[
	#
	# Set "want_ucdsnmp" to "ifpresent" to make the default "use it
	# if you find it, otherwise don't".
	#
	want_ucdsnmp=ifpresent
	ucdsnmp_dir=
])

dnl try net-snmp first
AC_MSG_CHECKING(whether to use NET-SNMP library if available)
if test "x$netsnmpconfig" != "xno" ; then
	AC_MSG_RESULT(yes)
	dnl get the net-snmp-config binary
	if test "x$netsnmpconfig" = "xyes" -o "x$netsnmpconfig" = "x" ; then
		dnl search for it
		AC_PATH_PROG(NETSNMPCONFIG,net-snmp-config)
	else
		NETSNMPCONFIG=$netsnmpconfig
		if test ! -x $NETSNMPCONFIG ; then
			AC_MSG_ERROR(Invalid net-snmp-config: $NETSNMPCONFIG)
		fi
	fi
else
	AC_MSG_RESULT(no)
fi

if test "x$NETSNMPCONFIG" != "xno" -a "x$NETSNMPCONFIG" != "x" -a -x "$NETSNMPCONFIG" ; then
	dnl other choices for flags to use here: could also use
	dnl --prefix or --exec-prefix if you don't want the full list.

	#
	# Save the current settings of CFLAGS and CPPFLAGS, and add
	# the output of "$NETSNMPCONFIG --cflags" to it, so that when
	# searching for the Net-SNMP headers, we look in whatever
	# directory that output specifies.
	#
	ethereal_save_CFLAGS="$CFLAGS"
	ethereal_save_CPPFLAGS="$CPPFLAGS"
	CFLAGS="$CFLAGS `$NETSNMPCONFIG --cflags`"
	CPPFLAGS="$CPPFLAGS `$NETSNMPCONFIG --cflags`"

	AC_CHECK_HEADERS(net-snmp/net-snmp-config.h net-snmp/library/default_store.h)
	if test "x$ac_cv_header_net_snmp_net_snmp_config_h" = "xyes" -a "x$ac_cv_header_net_snmp_library_default_store_h" = "xyes" ; then
		SNMP_LIBS=`$NETSNMPCONFIG --libs`
		AC_DEFINE(HAVE_NET_SNMP, 1, [Define to enable support for NET-SNMP])
		have_net_snmp="yes"
	else
		# technically, we should retry ucd-snmp but it's
		# unlikely they have installed net-snmp-config and not
		# the net-snmp headers but do have the ucd-snmp
		# headers.  This would likely be a broken system to
		# try and use anyway.
		NETSNMPCONFIG="no"

		#
		# Restore the versions of CFLAGS and CPPFLAGS before
		# we added the output of '$NETSNMPCONFIG --cflags",
		# as we didn't actually find Net-SNMP there.
		#
		CFLAGS="$ethereal_save_CFLAGS"
		CPPFLAGS="$ethereal_save_CPPFLAGS"
	fi	
else
	AC_MSG_CHECKING(whether to use UCD SNMP library if available)
	if test "x$want_ucdsnmp" = "xno" ; then
		AC_MSG_RESULT(no)
	else
		AC_MSG_RESULT(yes)
		AC_ETHEREAL_UCDSNMP_CHECK
	fi
fi

if test "x$have_net_snmp" = "xyes" || test "x$have_ucd_snmp" = "xyes"; then
	AC_DEFINE(HAVE_SOME_SNMP, 1, [Define to if some SNMP support is to be used])
fi

AC_SUBST(SNMP_LIBS)

dnl ADNS Check
ADNS_LIBS=''
AC_MSG_CHECKING(whether to use the GNU ADNS library if available)
if test "x$with_adns" = "xno" ; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	AC_ETHEREAL_ADNS_CHECK
fi
AC_SUBST(ADNS_LIBS)

dnl Checks for typedefs, structures, and compiler characteristics.
# AC_C_CONST

# We need to know whether "struct sockaddr" has an "sa_len" member
# for get_interface_list().

AC_ETHEREAL_STRUCT_SA_LEN

# We must know our byte order
AC_C_BIGENDIAN

# Checks whether "-traditional" is needed when using "ioctl".
# XXX - do we need this?
AC_PROG_GCC_TRADITIONAL

# If there's a system out there that has snprintf and _doesn't_ have vsnprintf,
# then this won't work.
SNPRINTF_C=""
SNPRINTF_O=""
AC_CHECK_FUNC(snprintf, SNPRINTF_O="",
  [SNPRINTF_O="snprintf.o"
   AC_DEFINE(NEED_SNPRINTF_H, 1, [Define if sprintf.h needs to be included])
])
if test "$ac_cv_func_snprintf" = no ; then
  SNPRINTF_C="snprintf.c"
  SNPRINTF_O="snprintf.o"
fi
AC_SUBST(SNPRINTF_C)
AC_SUBST(SNPRINTF_O)

AC_CHECK_FUNC(strerror, STRERROR_O="",
  [STRERROR_O="strerror.o"
   AC_DEFINE(NEED_STRERROR_H, 1, [Define if strerror.h needs to be included])
])
if test "$ac_cv_func_strerror" = no ; then
  STRERROR_C="strerror.c"
  STRERROR_O="strerror.o"
fi
AC_SUBST(STRERROR_C)
AC_SUBST(STRERROR_O)

AC_CHECK_FUNC(strcasecmp, STRCASECMP_O="",
  STRCASECMP_O="strcasecmp.o")
if test "$ac_cv_func_strcasecmp" = no ; then
  STRCASECMP_C="strcasecmp.c"
  STRCASECMP_O="strcasecmp.o"
fi
AC_SUBST(STRCASECMP_C)
AC_SUBST(STRCASECMP_O)

AC_CHECK_FUNC(strncasecmp, STRNCASECMP_O="",
  STRNCASECMP_O="strncasecmp.o")
if test "$ac_cv_func_strncasecmp" = no ; then
  STRNCASECMP_C="strncasecmp.c"
  STRNCASECMP_O="strncasecmp.o"
fi
AC_SUBST(STRNCASECMP_C)
AC_SUBST(STRNCASECMP_O)

AC_CHECK_FUNC(mkstemp, MKSTEMP_O="",
  MKSTEMP_O="mkstemp.o")
if test "$ac_cv_func_mkstemp" = no ; then
  MKSTEMP_C="mkstemp.c"
  MKSTEMP_O="mkstemp.o"
fi
AC_SUBST(MKSTEMP_C)
AC_SUBST(MKSTEMP_O)

AC_CHECK_FUNC(strptime, STRPTIME_O="",
  [STRPTIME_O="strptime.o"
   AC_DEFINE(NEED_STRPTIME_H, 1, [Define if strptime.h needs to be included])
])
if test "$ac_cv_func_strptime" = no ; then
  STRPTIME_C="strptime.c"
  STRPTIME_O="strptime.o"
fi
AC_SUBST(STRPTIME_C)
AC_SUBST(STRPTIME_O)

AC_CHECK_FUNCS(getprotobynumber gethostbyname2)

dnl blank for now, but will be used in future
AC_SUBST(ethereal_SUBDIRS)

dnl
dnl check whether plugins should be enabled and, if they should be,
dnl check for plugins directory - stolen from Amanda's configure.in
dnl
plugindir="$libdir/ethereal/plugins/$VERSION"
AC_ARG_WITH(plugins,
changequote(<<, >>)dnl
<<  --with-plugins[=DIR]    support plugins (installed in DIR, if supplied).>>,
changequote([, ])dnl
[
  case "$withval" in
  "" | y | ye | yes )
    if test x$have_plugins = xno
    then
      AC_MSG_ERROR([GLib on this platform doesn't support loadable modules, so you can't enable plugins.])
    fi
    ;;
  n | no)
    have_plugins=no
    ;;
  *)
    if test x$have_plugins = xno
    then
      AC_MSG_ERROR([GLib on this platform doesn't support loadable modules, so you can't enable plugins.])
    fi
    plugindir="$withval"
    ;;
  esac
])

AM_CONDITIONAL(HAVE_PLUGINS, test x$have_plugins = xyes)
if test x$have_plugins = xyes
then
  AC_DEFINE(HAVE_PLUGINS, 1, [Define if plugins are enabled])
  plugindir=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
    eval echo "$plugindir"
  )`
  AC_DEFINE_UNQUOTED(PLUGIN_DIR, "$plugindir", [Plugin installation directory])
else
  AC_DEFINE(PLUGIN_DIR, NULL, [Plugin installation directory])
fi
AC_SUBST(plugindir)

dnl libtool defs
#
# Yes, AM_PROG_LIBTOOL is redundant with newer version(s) of some tool(s)
# (autoconf?  automake?  libtool?) - with the newer version(s), it's
# just an alias for AC_PROG_LIBTOOL, which is called earlier.
#
# With older version(s) of those tool(s), however, it's not just an
# alias, and the configure scripts don't work without it.
#
AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

AM_CONDITIONAL(ENABLE_STATIC, test x$enable_static = xyes)
if test x$enable_static = xyes -a x$have_plugins = xyes
then
  AC_DEFINE(ENABLE_STATIC, 1, [Link plugins statically into Ethereal])
fi
AC_SUBST(ENABLE_STATIC)

AM_CONFIG_HEADER(config.h)
AC_CONFIG_SUBDIRS(epan wiretap)
AC_OUTPUT(
  Makefile
  doc/Makefile
  gtk/Makefile
  help/Makefile
  packaging/Makefile
  packaging/nsis/Makefile
  packaging/rpm/Makefile
  packaging/rpm/SPECS/Makefile
  packaging/rpm/SPECS/ethereal.spec
  packaging/svr4/Makefile
  packaging/svr4/checkinstall
  packaging/svr4/pkginfo
  plugins/Makefile
  plugins/acn/Makefile
  plugins/artnet/Makefile
  plugins/asn1/Makefile
  plugins/docsis/Makefile
  plugins/enttec/Makefile
  plugins/giop/Makefile
  plugins/gryphon/Makefile
  plugins/irda/Makefile
  plugins/lwres/Makefile
  plugins/megaco/Makefile
  plugins/mgcp/Makefile
  plugins/pcli/Makefile
  plugins/rdm/Makefile
  plugins/rtnet/Makefile
  plugins/v5ua/Makefile
  tools/Makefile
  tools/lemon/Makefile
  ,)


# Pretty messages

if test "x$enable_setuid_install" = "xyes" ; then
	setuid_message="yes (DANGEROUS!!!)"
else
	setuid_message="no"
fi

if test "x$want_zlib" = "xno" ; then
	zlib_message="no"
else
	zlib_message="yes"
fi

if test "x$want_pcre" = "xno" ; then
	pcre_message="no"
else
	pcre_message="yes"
fi

if test "x$have_good_adns" = "xyes" ; then
	adns_message="yes"
else
	adns_message="no"
fi

if test "x$NETSNMPCONFIG" != "xno" -a "x$NETSNMPCONFIG" != "x" -a -x "$NETSNMPCONFIG" ; then
	snmp_libs_message="yes (net-snmp)"
elif test "x$SNMP_LIBS" = "x" ; then
	snmp_libs_message="no"
else
	snmp_libs_message="yes (ucd-snmp)"
fi

echo ""
echo "The Ethereal package has been configured with the following options."
echo "                    Build ethereal : $enable_ethereal"
echo "                   Build tethereal : $enable_tethereal"
echo "                     Build editcap : $enable_editcap"
echo "                    Build mergecap : $enable_mergecap"
echo "                   Build text2pcap : $enable_text2pcap"
echo "                     Build idl2eth : $enable_idl2eth"
echo "                     Build randpkt : $enable_randpkt"
echo "                      Build dftest : $enable_dftest"
echo ""
echo "                    Install setuid : $setuid_message"
echo "                       Use plugins : $have_plugins"
echo "               Use GTK+ v2 library : $enable_gtk2"
if test "x$enable_gtk2" = "xyes" ; then
echo "                       Use threads : $enable_threads"
echo "            Build profile binaries : $enable_profile_build"
fi
echo "                  Use pcap library : $want_pcap"
echo "                  Use zlib library : $zlib_message"
echo "                  Use pcre library : $pcre_message"
echo "              Use GNU ADNS library : $adns_message"
echo "          Use IPv6 name resolution : $enable_ipv6"
echo "     Use UCD SNMP/NET-SNMP library : $snmp_libs_message"
